
stm32_esp826_pfeproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb4  08002bb4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb4  08002bb4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb4  08002bb4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  2000005c  08002c18  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08002c18  000209f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001943  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000926  00000000  00000000  00021a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00022338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016d  00000000  00000000  00022538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f329  00000000  00000000  000226a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003028  00000000  00000000  000319ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053911  00000000  00000000  000349f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b9c  00000000  00000000  00088308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00088ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e08 	.word	0x08001e08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001e08 	.word	0x08001e08

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <circular_buffer_init>:
circular_buffer *_rx_buffer2;
circular_buffer *_tx_buffer2;


void circular_buffer_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Initial buffers*/
	_rx_buffer1 = &rx_buffer1;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <circular_buffer_init+0x40>)
 80002b6:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <circular_buffer_init+0x44>)
 80002b8:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <circular_buffer_init+0x48>)
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <circular_buffer_init+0x4c>)
 80002be:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <circular_buffer_init+0x50>)
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <circular_buffer_init+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <circular_buffer_init+0x58>)
 80002c8:	4a10      	ldr	r2, [pc, #64]	; (800030c <circular_buffer_init+0x5c>)
 80002ca:	601a      	str	r2, [r3, #0]

	/*Initial UART interrupts*/
	USART1->CR1 |=CR1_RXNEIE;  				/*esp_uart*/
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <circular_buffer_init+0x60>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <circular_buffer_init+0x60>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=CR1_RXNEIE;  				/*debug_uart*/
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <circular_buffer_init+0x64>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <circular_buffer_init+0x64>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	60d3      	str	r3, [r2, #12]


}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	2000089c 	.word	0x2000089c
 80002f4:	2000007c 	.word	0x2000007c
 80002f8:	200008a0 	.word	0x200008a0
 80002fc:	20000284 	.word	0x20000284
 8000300:	200008a4 	.word	0x200008a4
 8000304:	2000048c 	.word	0x2000048c
 8000308:	200008a8 	.word	0x200008a8
 800030c:	20000694 	.word	0x20000694
 8000310:	40011000 	.word	0x40011000
 8000314:	40004400 	.word	0x40004400

08000318 <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	6039      	str	r1, [r7, #0]
 8000322:	71fb      	strb	r3, [r7, #7]
	 int loc =  (uint32_t)(buffer->head +1)% UART_BUFFER_SIZE;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800032a:	3301      	adds	r3, #1
 800032c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000330:	60fb      	str	r3, [r7, #12]

	/*Check if no overflow will occur*/

	 if(loc != buffer->tail){
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	429a      	cmp	r2, r3
 800033c:	d009      	beq.n	8000352 <buff_store_char+0x3a>
		 /*Store character*/
		 buffer->buffer[buffer->head]  = c ;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	79f9      	ldrb	r1, [r7, #7]
 8000348:	54d1      	strb	r1, [r2, r3]
		 /*Update head*/
		 buffer->head = loc;
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	 }
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <find_str>:


int8_t find_str(char *str2, char *str1)
{
 800035e:	b480      	push	{r7}
 8000360:	b087      	sub	sp, #28
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
  int l, i, j;
  for (l = 0; str2[l] != '\0'; l++){}
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e002      	b.n	8000374 <find_str+0x16>
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	3301      	adds	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1f6      	bne.n	800036e <find_str+0x10>

   for (i = 0, j = 0; str1[i] != '\0' && str2[j] != '\0'; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	e012      	b.n	80003b0 <find_str+0x52>
   {
       if (str1[i] == str2[j])
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	4413      	add	r3, r2
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	440b      	add	r3, r1
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d103      	bne.n	80003a6 <find_str+0x48>
       {
           j++;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	3301      	adds	r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	e001      	b.n	80003aa <find_str+0x4c>
       }
       else
       {
           j = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
   for (i = 0, j = 0; str1[i] != '\0' && str2[j] != '\0'; i++)
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	3301      	adds	r3, #1
 80003ae:	613b      	str	r3, [r7, #16]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	4413      	add	r3, r2
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <find_str+0x6a>
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1e0      	bne.n	800038a <find_str+0x2c>
       }
   }

   if (j == l)
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d101      	bne.n	80003d4 <find_str+0x76>
   {

       return 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	e001      	b.n	80003d8 <find_str+0x7a>
   }
   else
   {
       return -1;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295

   }

}
 80003d8:	4618      	mov	r0, r3
 80003da:	371c      	adds	r7, #28
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <buffer_clear>:


void buffer_clear(portType uart)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <buffer_clear+0x5c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d10c      	bne.n	8000412 <buffer_clear+0x2e>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer1->buffer,'\0',UART_BUFFER_SIZE);
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <buffer_clear+0x60>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f87c 	bl	8001500 <memset>
		_rx_buffer1->head = 0 ;
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <buffer_clear+0x60>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	if(uart == debug_port )
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <buffer_clear+0x64>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	79fa      	ldrb	r2, [r7, #7]
 8000418:	429a      	cmp	r2, r3
 800041a:	d10c      	bne.n	8000436 <buffer_clear+0x52>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer2->buffer,'\0',UART_BUFFER_SIZE);
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <buffer_clear+0x68>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f001 f86a 	bl	8001500 <memset>
		_rx_buffer2->head = 0 ;
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <buffer_clear+0x68>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2200      	movs	r2, #0
 8000432:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000
 8000444:	2000089c 	.word	0x2000089c
 8000448:	20000078 	.word	0x20000078
 800044c:	200008a4 	.word	0x200008a4

08000450 <buffer_peek>:


int32_t buffer_peek(portType uart)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <buffer_peek+0x84>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	79fa      	ldrb	r2, [r7, #7]
 8000460:	429a      	cmp	r2, r3
 8000462:	d114      	bne.n	800048e <buffer_peek+0x3e>
	{
	   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <buffer_peek+0x88>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <buffer_peek+0x88>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000474:	429a      	cmp	r2, r3
 8000476:	d102      	bne.n	800047e <buffer_peek+0x2e>
	   {
		   return -1;
 8000478:	f04f 33ff 	mov.w	r3, #4294967295
 800047c:	e023      	b.n	80004c6 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer1->buffer[_rx_buffer1->tail];
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <buffer_peek+0x88>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <buffer_peek+0x88>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800048a:	5cd3      	ldrb	r3, [r2, r3]
 800048c:	e01b      	b.n	80004c6 <buffer_peek+0x76>
	   }
	}

	else if(uart == debug_port )
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <buffer_peek+0x8c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	429a      	cmp	r2, r3
 8000496:	d114      	bne.n	80004c2 <buffer_peek+0x72>
	{
	   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <buffer_peek+0x90>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <buffer_peek+0x90>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d102      	bne.n	80004b2 <buffer_peek+0x62>
	   {
		   return -1;
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	e009      	b.n	80004c6 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer2->buffer[_rx_buffer2->tail];
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <buffer_peek+0x90>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <buffer_peek+0x90>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004be:	5cd3      	ldrb	r3, [r2, r3]
 80004c0:	e001      	b.n	80004c6 <buffer_peek+0x76>
	   }
	}

	else
	{
		 return -1;
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000
 80004d8:	2000089c 	.word	0x2000089c
 80004dc:	20000078 	.word	0x20000078
 80004e0:	200008a4 	.word	0x200008a4

080004e4 <buffer_read>:
int32_t buffer_read(portType uart)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <buffer_read+0xb8>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d121      	bne.n	800053c <buffer_read+0x58>
	{
		   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <buffer_read+0xbc>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <buffer_read+0xbc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000508:	429a      	cmp	r2, r3
 800050a:	d102      	bne.n	8000512 <buffer_read+0x2e>
			   {
				   return -1;
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	e03d      	b.n	800058e <buffer_read+0xaa>
			   }
		   else
		   {
			  unsigned char c =  _rx_buffer1->buffer[_rx_buffer1->tail];
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <buffer_read+0xbc>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <buffer_read+0xbc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800051e:	5cd3      	ldrb	r3, [r2, r3]
 8000520:	73bb      	strb	r3, [r7, #14]
			  _rx_buffer1->tail =  (uint32_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <buffer_read+0xbc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <buffer_read+0xbc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000534:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			  return c;
 8000538:	7bbb      	ldrb	r3, [r7, #14]
 800053a:	e028      	b.n	800058e <buffer_read+0xaa>
		   }
	}

	else if(uart == debug_port )
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <buffer_read+0xc0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	429a      	cmp	r2, r3
 8000544:	d121      	bne.n	800058a <buffer_read+0xa6>
	{
		   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <buffer_read+0xc4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <buffer_read+0xc4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000556:	429a      	cmp	r2, r3
 8000558:	d102      	bne.n	8000560 <buffer_read+0x7c>
			 {
				   return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e016      	b.n	800058e <buffer_read+0xaa>
			 }
		   else
		   {
				  unsigned char c =  _rx_buffer2->buffer[_rx_buffer2->tail];
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <buffer_read+0xc4>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <buffer_read+0xc4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800056c:	5cd3      	ldrb	r3, [r2, r3]
 800056e:	73fb      	strb	r3, [r7, #15]
				  _rx_buffer2->tail =  (uint32_t)(_rx_buffer2->tail +1)%UART_BUFFER_SIZE;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <buffer_read+0xc4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <buffer_read+0xc4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
				  return c;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	e001      	b.n	800058e <buffer_read+0xaa>
		   }
	}

	else
	{
		 return -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	2000089c 	.word	0x2000089c
 80005a4:	20000078 	.word	0x20000078
 80005a8:	200008a4 	.word	0x200008a4

080005ac <buffer_write>:

void buffer_write(unsigned char c, portType uart )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	if(uart == esp82xx_port )
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <buffer_write+0xbc>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d122      	bne.n	800060c <buffer_write+0x60>
	{
		int loc =  (_tx_buffer1->head +1)%UART_BUFFER_SIZE;
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <buffer_write+0xc0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ce:	3301      	adds	r3, #1
 80005d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005d4:	60fb      	str	r3, [r7, #12]

		while(loc == _tx_buffer1->tail ){}
 80005d6:	bf00      	nop
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <buffer_write+0xc0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d0f8      	beq.n	80005d8 <buffer_write+0x2c>

		_tx_buffer1->buffer[_tx_buffer1->head]=  c;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <buffer_write+0xc0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <buffer_write+0xc0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f2:	79f9      	ldrb	r1, [r7, #7]
 80005f4:	54d1      	strb	r1, [r2, r3]

		_tx_buffer1->head =  loc;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <buffer_write+0xc0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART1->CR1 |= CR1_TXEIE;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <buffer_write+0xc4>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <buffer_write+0xc4>)
 8000606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060a:	60d3      	str	r3, [r2, #12]

	}

	if(uart == debug_port)
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <buffer_write+0xc8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	79ba      	ldrb	r2, [r7, #6]
 8000612:	429a      	cmp	r2, r3
 8000614:	d122      	bne.n	800065c <buffer_write+0xb0>
	{
		int loc =  (_tx_buffer2->head +1)%UART_BUFFER_SIZE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <buffer_write+0xcc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800061e:	3301      	adds	r3, #1
 8000620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000624:	60bb      	str	r3, [r7, #8]

		while(loc == _tx_buffer2->tail ){}
 8000626:	bf00      	nop
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <buffer_write+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	429a      	cmp	r2, r3
 8000634:	d0f8      	beq.n	8000628 <buffer_write+0x7c>

		_tx_buffer2->buffer[_tx_buffer2->head]=  c;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <buffer_write+0xcc>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <buffer_write+0xcc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000642:	79f9      	ldrb	r1, [r7, #7]
 8000644:	54d1      	strb	r1, [r2, r3]

		_tx_buffer2->head =  loc;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <buffer_write+0xcc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART2->CR1 |= CR1_TXEIE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <buffer_write+0xd0>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <buffer_write+0xd0>)
 8000656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065a:	60d3      	str	r3, [r2, #12]

	  }
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000000 	.word	0x20000000
 800066c:	200008a0 	.word	0x200008a0
 8000670:	40011000 	.word	0x40011000
 8000674:	20000078 	.word	0x20000078
 8000678:	200008a8 	.word	0x200008a8
 800067c:	40004400 	.word	0x40004400

08000680 <is_data>:


int32_t is_data(portType uart)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	if(uart ==  esp82xx_port)
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <is_data+0x78>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	429a      	cmp	r2, r3
 8000692:	d111      	bne.n	80006b8 <is_data+0x38>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <is_data+0x7c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <is_data+0x7c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006b6:	e018      	b.n	80006ea <is_data+0x6a>
	}
	else if(uart ==  debug_port)
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <is_data+0x80>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	79fa      	ldrb	r2, [r7, #7]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d111      	bne.n	80006e6 <is_data+0x66>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <is_data+0x84>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <is_data+0x84>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	b29b      	uxth	r3, r3
 80006da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006de:	b29b      	uxth	r3, r3
 80006e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006e4:	e001      	b.n	80006ea <is_data+0x6a>

	}
	else
	{
		return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	2000089c 	.word	0x2000089c
 8000700:	20000078 	.word	0x20000078
 8000704:	200008a4 	.word	0x200008a4

08000708 <get_first_char>:
/*Function to find the position of the first character of a string in the
 * the buffer*/


static void get_first_char(char *str)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*Make sure there is data in the buffer*/
	while(!is_data(esp82xx_port)){}
 8000710:	bf00      	nop
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <get_first_char+0x68>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffb2 	bl	8000680 <is_data>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f7      	beq.n	8000712 <get_first_char+0xa>

	while(buffer_peek(esp82xx_port)!= str[0]){
 8000722:	e016      	b.n	8000752 <get_first_char+0x4a>

		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <get_first_char+0x6c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800072c:	b29b      	uxth	r3, r3
 800072e:	3301      	adds	r3, #1
 8000730:	b29b      	uxth	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <get_first_char+0x6c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800073c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		while(!is_data(esp82xx_port)){}
 8000740:	bf00      	nop
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <get_first_char+0x68>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <is_data>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f7      	beq.n	8000742 <get_first_char+0x3a>
	while(buffer_peek(esp82xx_port)!= str[0]){
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <get_first_char+0x68>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fe7a 	bl	8000450 <buffer_peek>
 800075c:	4602      	mov	r2, r0
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d1de      	bne.n	8000724 <get_first_char+0x1c>

	}
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	2000089c 	.word	0x2000089c

08000778 <is_response>:


int8_t is_response(char *str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	int curr_pos = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
	int len = strlen(str);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd35 	bl	80001f4 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	60bb      	str	r3, [r7, #8]

	while( curr_pos != len)
 800078e:	e028      	b.n	80007e2 <is_response+0x6a>
	{
		curr_pos  = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
		get_first_char(str);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ffb7 	bl	8000708 <get_first_char>

		while(buffer_peek(esp82xx_port) == str[curr_pos])
 800079a:	e016      	b.n	80007ca <is_response+0x52>
		{
			curr_pos++;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]

			buffer_read(esp82xx_port);
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <is_response+0x8c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe9c 	bl	80004e4 <buffer_read>

			if(curr_pos ==  len)
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d101      	bne.n	80007b8 <is_response+0x40>
			{
				/*success*/
				return 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e020      	b.n	80007fa <is_response+0x82>
			}

			while(!is_data(esp82xx_port)){}
 80007b8:	bf00      	nop
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <is_response+0x8c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff5e 	bl	8000680 <is_data>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f7      	beq.n	80007ba <is_response+0x42>
		while(buffer_peek(esp82xx_port) == str[curr_pos])
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <is_response+0x8c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe3e 	bl	8000450 <buffer_peek>
 80007d4:	4601      	mov	r1, r0
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d0dc      	beq.n	800079c <is_response+0x24>
	while( curr_pos != len)
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d1d2      	bne.n	8000790 <is_response+0x18>

		}

	}

	if(curr_pos  == len)
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d101      	bne.n	80007f6 <is_response+0x7e>
	{
		/*success*/
	   return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e001      	b.n	80007fa <is_response+0x82>
	}
	else
	{
	   return -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000

08000808 <get_next_strs>:

int8_t get_next_strs(char *str,uint8_t num_of_chars, char *dest_buffer)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	460b      	mov	r3, r1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	72fb      	strb	r3, [r7, #11]
	/*Make sure the string exists*/
	while(!is_response(str)){}
 8000816:	bf00      	nop
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f7ff ffad 	bl	8000778 <is_response>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0f9      	beq.n	8000818 <get_next_strs+0x10>

	for(int indx=0; indx < num_of_chars ; indx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e016      	b.n	8000858 <get_next_strs+0x50>
	{
		while(!is_data(esp82xx_port)){}
 800082a:	bf00      	nop
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <get_next_strs+0x64>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff25 	bl	8000680 <is_data>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f7      	beq.n	800082c <get_next_strs+0x24>
		dest_buffer[indx] =  buffer_read(esp82xx_port);
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <get_next_strs+0x64>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fe4f 	bl	80004e4 <buffer_read>
 8000846:	4601      	mov	r1, r0
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	b2ca      	uxtb	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
	for(int indx=0; indx < num_of_chars ; indx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	7afb      	ldrb	r3, [r7, #11]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbe4      	blt.n	800082a <get_next_strs+0x22>

	}

	return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <buffer_send_string>:



void buffer_send_string(const char *s, portType uart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	while(*s != '\0')
 800087c:	e008      	b.n	8000890 <buffer_send_string+0x20>
	{
		buffer_write(*s++,uart);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe8e 	bl	80005ac <buffer_write>
	while(*s != '\0')
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f2      	bne.n	800087e <buffer_send_string+0xe>
	}
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <process_copy>:

static int8_t process_copy(char * str, char * dest_buffer, int start_pos)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	int curr_pos = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
	int len =  strlen(str);
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff fc9d 	bl	80001f4 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	617b      	str	r3, [r7, #20]
	int indx = start_pos;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	61bb      	str	r3, [r7, #24]

	while(!is_data(esp82xx_port)){}
 80008c2:	bf00      	nop
 80008c4:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <process_copy+0x11c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fed9 	bl	8000680 <is_data>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f7      	beq.n	80008c4 <process_copy+0x20>

	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 80008d4:	e024      	b.n	8000920 <process_copy+0x7c>
	{
		dest_buffer[indx] =  _rx_buffer1->buffer[_rx_buffer1->tail];
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <process_copy+0x120>)
 80008d8:	6819      	ldr	r1, [r3, #0]
 80008da:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <process_copy+0x120>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	68b8      	ldr	r0, [r7, #8]
 80008e6:	4403      	add	r3, r0
 80008e8:	5c8a      	ldrb	r2, [r1, r2]
 80008ea:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80008ec:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <process_copy+0x120>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3301      	adds	r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <process_copy+0x120>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000904:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	3301      	adds	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]

		while(!is_data(esp82xx_port)){}
 800090e:	bf00      	nop
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <process_copy+0x11c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff feb3 	bl	8000680 <is_data>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f7      	beq.n	8000910 <process_copy+0x6c>
	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <process_copy+0x11c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fd93 	bl	8000450 <buffer_peek>
 800092a:	4601      	mov	r1, r0
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4299      	cmp	r1, r3
 8000936:	d1ce      	bne.n	80008d6 <process_copy+0x32>


	}

	while(buffer_peek(esp82xx_port) == str[curr_pos])
 8000938:	e01f      	b.n	800097a <process_copy+0xd6>
	{
		curr_pos++;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3301      	adds	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
		dest_buffer[indx++] = buffer_read(esp82xx_port);
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <process_copy+0x11c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fdcd 	bl	80004e4 <buffer_read>
 800094a:	4601      	mov	r1, r0
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	61ba      	str	r2, [r7, #24]
 8000952:	461a      	mov	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	b2ca      	uxtb	r2, r1
 800095a:	701a      	strb	r2, [r3, #0]

		if(curr_pos == len){
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	429a      	cmp	r2, r3
 8000962:	d101      	bne.n	8000968 <process_copy+0xc4>

			return 1;
 8000964:	2301      	movs	r3, #1
 8000966:	e027      	b.n	80009b8 <process_copy+0x114>
		}

		while(!is_data(esp82xx_port)){}
 8000968:	bf00      	nop
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <process_copy+0x11c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe86 	bl	8000680 <is_data>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0f7      	beq.n	800096a <process_copy+0xc6>
	while(buffer_peek(esp82xx_port) == str[curr_pos])
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <process_copy+0x11c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd66 	bl	8000450 <buffer_peek>
 8000984:	4601      	mov	r1, r0
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4299      	cmp	r1, r3
 8000990:	d0d3      	beq.n	800093a <process_copy+0x96>

	}

	if(curr_pos != len)
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	429a      	cmp	r2, r3
 8000998:	d006      	beq.n	80009a8 <process_copy+0x104>
	{
		curr_pos = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]

		process_copy(str, dest_buffer, indx);
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff ff7e 	bl	80008a4 <process_copy>

	}

	if(curr_pos  ==  len)
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d101      	bne.n	80009b4 <process_copy+0x110>
	{
		return 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e001      	b.n	80009b8 <process_copy+0x114>
	}
	else
	{
		return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
	}



}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	2000089c 	.word	0x2000089c

080009c8 <copy_up_to_string>:
int8_t copy_up_to_string(char * str, char * dest_buffer)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	/*Process copy*/
	return (process_copy(str,dest_buffer, 0));
 80009d2:	2200      	movs	r2, #0
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff64 	bl	80008a4 <process_copy>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <esp82_uart_callback>:

void esp82_uart_callback(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART1->SR & SR_RXNE) != 0) && ((USART1->CR1 & CR1_RXNEIE) != 0))
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <esp82_uart_callback+0x94>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00f      	beq.n	8000a1a <esp82_uart_callback+0x32>
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <esp82_uart_callback+0x94>)
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <esp82_uart_callback+0x32>
	{
		unsigned char c = USART1->DR;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer1);
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <esp82_uart_callback+0x98>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc7f 	bl	8000318 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART1->SR & SR_TXE) != 0) && ((USART1->CR1 & CR1_TXEIE) != 0))
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d026      	beq.n	8000a74 <esp82_uart_callback+0x8c>
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d020      	beq.n	8000a74 <esp82_uart_callback+0x8c>
	{
		if(tx_buffer1.head  == tx_buffer1.tail)
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d106      	bne.n	8000a50 <esp82_uart_callback+0x68>
		{
			USART1->CR1 &=~CR1_TXEIE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a4c:	60d3      	str	r3, [r2, #12]
			USART1->DR = c;

		}
	}

}
 8000a4e:	e011      	b.n	8000a74 <esp82_uart_callback+0x8c>
			unsigned char c  = tx_buffer1.buffer[tx_buffer1.tail];
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	71bb      	strb	r3, [r7, #6]
			tx_buffer1.tail =  (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a62:	3301      	adds	r3, #1
 8000a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a6a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART1->DR = c;
 8000a6e:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	6053      	str	r3, [r2, #4]
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	2000089c 	.word	0x2000089c
 8000a84:	20000284 	.word	0x20000284

08000a88 <debug_uart_callback>:

void debug_uart_callback(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART2->SR & SR_RXNE) != 0) && ((USART2->CR1 & CR1_RXNEIE) != 0))
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <debug_uart_callback+0x94>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00f      	beq.n	8000aba <debug_uart_callback+0x32>
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <debug_uart_callback+0x94>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d009      	beq.n	8000aba <debug_uart_callback+0x32>
	{
		unsigned char c = USART2->DR;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <debug_uart_callback+0x94>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer2);
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <debug_uart_callback+0x98>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc2f 	bl	8000318 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART2->SR & SR_TXE) != 0) && ((USART2->CR1 & CR1_TXEIE) != 0))
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <debug_uart_callback+0x94>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d026      	beq.n	8000b14 <debug_uart_callback+0x8c>
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <debug_uart_callback+0x94>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d020      	beq.n	8000b14 <debug_uart_callback+0x8c>
	{
		if(tx_buffer2.head  == tx_buffer2.tail)
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <debug_uart_callback+0x9c>)
 8000ad4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <debug_uart_callback+0x9c>)
 8000ada:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d106      	bne.n	8000af0 <debug_uart_callback+0x68>
		{
			USART2->CR1 &=~CR1_TXEIE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <debug_uart_callback+0x94>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <debug_uart_callback+0x94>)
 8000ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aec:	60d3      	str	r3, [r2, #12]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
			USART2->DR = c;

		}
	}
}
 8000aee:	e011      	b.n	8000b14 <debug_uart_callback+0x8c>
			unsigned char c  = tx_buffer2.buffer[tx_buffer2.tail];
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <debug_uart_callback+0x9c>)
 8000af2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <debug_uart_callback+0x9c>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	71bb      	strb	r3, [r7, #6]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <debug_uart_callback+0x9c>)
 8000afe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000b02:	3301      	adds	r3, #1
 8000b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <debug_uart_callback+0x9c>)
 8000b0a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART2->DR = c;
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <debug_uart_callback+0x94>)
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	6053      	str	r3, [r2, #4]
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	200008a4 	.word	0x200008a4
 8000b24:	20000694 	.word	0x20000694

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <debug_uart_init>:
	debug_uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <debug_uart_init+0xe8>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a37      	ldr	r2, [pc, #220]	; (8000c4c <debug_uart_init+0xe8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <debug_uart_init+0xec>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a35      	ldr	r2, [pc, #212]	; (8000c50 <debug_uart_init+0xec>)
 8000b7a:	f023 0310 	bic.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000b80:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <debug_uart_init+0xec>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <debug_uart_init+0xec>)
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <debug_uart_init+0xec>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <debug_uart_init+0xec>)
 8000b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b96:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <debug_uart_init+0xec>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <debug_uart_init+0xec>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba2:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <debug_uart_init+0xec>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <debug_uart_init+0xec>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <debug_uart_init+0xec>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <debug_uart_init+0xec>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <debug_uart_init+0xec>)
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <debug_uart_init+0xec>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <debug_uart_init+0xec>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <debug_uart_init+0xec>)
 8000bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bd2:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <debug_uart_init+0xec>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <debug_uart_init+0xec>)
 8000bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bde:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <debug_uart_init+0xec>)
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <debug_uart_init+0xec>)
 8000be6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <debug_uart_init+0xec>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <debug_uart_init+0xec>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <debug_uart_init+0xec>)
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <debug_uart_init+0xec>)
 8000bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c02:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <debug_uart_init+0xe8>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <debug_uart_init+0xe8>)
 8000c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <debug_uart_init+0xf0>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <debug_uart_init+0xf0>)
 8000c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c1a:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000c1c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <debug_uart_init+0xf4>)
 8000c22:	f000 f8c1 	bl	8000da8 <compute_uart_bd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <debug_uart_init+0xf0>)
 8000c2c:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <debug_uart_init+0xf0>)
 8000c30:	220c      	movs	r2, #12
 8000c32:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 8000c34:	2026      	movs	r0, #38	; 0x26
 8000c36:	f7ff ff77 	bl	8000b28 <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <debug_uart_init+0xf0>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <debug_uart_init+0xf0>)
 8000c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c44:	60d3      	str	r3, [r2, #12]


}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40004400 	.word	0x40004400
 8000c58:	00f42400 	.word	0x00f42400

08000c5c <esp_uart_init>:




void esp_uart_init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <esp_uart_init+0xe8>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a37      	ldr	r2, [pc, #220]	; (8000d44 <esp_uart_init+0xe8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 and PA10 modes to alternate function*/

	/*PA9*/
	GPIOA->MODER &=~(1U<<18);
 8000c6c:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <esp_uart_init+0xec>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a35      	ldr	r2, [pc, #212]	; (8000d48 <esp_uart_init+0xec>)
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000c78:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <esp_uart_init+0xec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a32      	ldr	r2, [pc, #200]	; (8000d48 <esp_uart_init+0xec>)
 8000c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c82:	6013      	str	r3, [r2, #0]

    /*PA10*/
	GPIOA->MODER &=~(1U<<20);
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <esp_uart_init+0xec>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <esp_uart_init+0xec>)
 8000c8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c8e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <esp_uart_init+0xec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2c      	ldr	r2, [pc, #176]	; (8000d48 <esp_uart_init+0xec>)
 8000c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9a:	6013      	str	r3, [r2, #0]

    /*Set alternate function type to UART1 AF07*/

	/*PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <esp_uart_init+0xec>)
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <esp_uart_init+0xec>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <esp_uart_init+0xec>)
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <esp_uart_init+0xec>)
 8000cae:	f043 0320 	orr.w	r3, r3, #32
 8000cb2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <esp_uart_init+0xec>)
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	4a23      	ldr	r2, [pc, #140]	; (8000d48 <esp_uart_init+0xec>)
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <esp_uart_init+0xec>)
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <esp_uart_init+0xec>)
 8000cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cca:	6253      	str	r3, [r2, #36]	; 0x24

	/*PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <esp_uart_init+0xec>)
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <esp_uart_init+0xec>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <esp_uart_init+0xec>)
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <esp_uart_init+0xec>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <esp_uart_init+0xec>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <esp_uart_init+0xec>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <esp_uart_init+0xec>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <esp_uart_init+0xec>)
 8000cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cfa:	6253      	str	r3, [r2, #36]	; 0x24

	/************Configure UART module*****************/

	/*Enable clock access to UART1*/
	RCC->APB2ENR |= UART1EN;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <esp_uart_init+0xe8>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <esp_uart_init+0xe8>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6453      	str	r3, [r2, #68]	; 0x44

	/*Disable UART module*/
	USART1->CR1 &=~CR1_UE;
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <esp_uart_init+0xf0>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <esp_uart_init+0xf0>)
 8000d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d12:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART1->BRR =  compute_uart_bd(APB2_CLK,UART_BAUDRATE);
 8000d14:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <esp_uart_init+0xf4>)
 8000d1a:	f000 f845 	bl	8000da8 <compute_uart_bd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <esp_uart_init+0xf0>)
 8000d24:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <esp_uart_init+0xf0>)
 8000d28:	220c      	movs	r2, #12
 8000d2a:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART1_IRQn);
 8000d2c:	2025      	movs	r0, #37	; 0x25
 8000d2e:	f7ff fefb 	bl	8000b28 <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART1->CR1 |=CR1_UE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <esp_uart_init+0xf0>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <esp_uart_init+0xf0>)
 8000d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d3c:	60d3      	str	r3, [r2, #12]



}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	00f42400 	.word	0x00f42400

08000d54 <systick_delay_ms>:
	USART2->DR  =  (ch & 0xFF);
}


void systick_delay_ms(uint32_t delay)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <systick_delay_ms+0x50>)
 8000d5e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000d62:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <systick_delay_ms+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_CLKSRC |CTRL_ENABLE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <systick_delay_ms+0x50>)
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	601a      	str	r2, [r3, #0]

	for(int i = 0; i< delay ;i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e009      	b.n	8000d8a <systick_delay_ms+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG)== 0){}
 8000d76:	bf00      	nop
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <systick_delay_ms+0x50>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f9      	beq.n	8000d78 <systick_delay_ms+0x24>
	for(int i = 0; i< delay ;i++)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d8f1      	bhi.n	8000d76 <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <systick_delay_ms+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]


}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	085a      	lsrs	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	441a      	add	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc0:	b29b      	uxth	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <esp82xx_sever_init>:
</html>";




void esp82xx_sever_init(ESP_Config *config){
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	circular_buffer_init();
 8000dd6:	f7ff fa6b 	bl	80002b0 <circular_buffer_init>
    esp82xx_reset();
 8000dda:	f000 f813 	bl	8000e04 <esp82xx_reset>
    esp82xx_startup_test();
 8000dde:	f000 f837 	bl	8000e50 <esp82xx_startup_test>
    esp82xx_sta_mode(config);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f85a 	bl	8000e9c <esp82xx_sta_mode>
    esp82xx_ap_connect(config);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f8b3 	bl	8000f54 <esp82xx_ap_connect>
    esp82xx_get_local_ip();
 8000dee:	f000 f8f7 	bl	8000fe0 <esp82xx_get_local_ip>
    esp82xx_multi_conn_en();
 8000df2:	f000 f949 	bl	8001088 <esp82xx_multi_conn_en>
    esp82xx_create_tcp_server();
 8000df6:	f000 f96d 	bl	80010d4 <esp82xx_create_tcp_server>


}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <esp82xx_reset>:


/*Reset esp82xx*/

 static void esp82xx_reset(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	/*Send reset command*/
	buffer_send_string("AT+RST\r\n",esp82xx_port);
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <esp82xx_reset+0x38>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <esp82xx_reset+0x3c>)
 8000e10:	f7ff fd2e 	bl	8000870 <buffer_send_string>

	/*Delay for 1 second*/
	systick_delay_ms(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e18:	f7ff ff9c 	bl	8000d54 <systick_delay_ms>

	/*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000e1c:	bf00      	nop
 8000e1e:	4809      	ldr	r0, [pc, #36]	; (8000e44 <esp82xx_reset+0x40>)
 8000e20:	f7ff fcaa 	bl	8000778 <is_response>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f9      	beq.n	8000e1e <esp82xx_reset+0x1a>

	buffer_send_string("Reset was successful...\n\r",debug_port);
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <esp82xx_reset+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <esp82xx_reset+0x48>)
 8000e32:	f7ff fd1d 	bl	8000870 <buffer_send_string>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	080028dc 	.word	0x080028dc
 8000e44:	080028e8 	.word	0x080028e8
 8000e48:	20000078 	.word	0x20000078
 8000e4c:	080028f0 	.word	0x080028f0

08000e50 <esp82xx_startup_test>:

 /*Test AT startup*/
 static void esp82xx_startup_test(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <esp82xx_startup_test+0x38>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fac3 	bl	80003e4 <buffer_clear>

	 /*Send test command*/
	buffer_send_string("AT\r\n",esp82xx_port);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <esp82xx_startup_test+0x38>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <esp82xx_startup_test+0x3c>)
 8000e66:	f7ff fd03 	bl	8000870 <buffer_send_string>



     /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000e6a:	bf00      	nop
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <esp82xx_startup_test+0x40>)
 8000e6e:	f7ff fc83 	bl	8000778 <is_response>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f9      	beq.n	8000e6c <esp82xx_startup_test+0x1c>

	buffer_send_string("AT Startup test successful...\n\r",debug_port);
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <esp82xx_startup_test+0x44>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <esp82xx_startup_test+0x48>)
 8000e80:	f7ff fcf6 	bl	8000870 <buffer_send_string>

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	0800290c 	.word	0x0800290c
 8000e90:	080028e8 	.word	0x080028e8
 8000e94:	20000078 	.word	0x20000078
 8000e98:	08002914 	.word	0x08002914

08000e9c <esp82xx_sta_mode>:

 /*configure station mode*/
  static void esp82xx_sta_mode(ESP_Config *config)
  {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	  char command[20];

	      /* Clear esp uart buffer */
	      buffer_clear(esp82xx_port);
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <esp82xx_sta_mode+0x98>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fa9b 	bl	80003e4 <buffer_clear>

	      /* Create command based on mode */
	      sprintf(command, "AT+CWMODE=%d\r\n", config->mode);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4920      	ldr	r1, [pc, #128]	; (8000f38 <esp82xx_sta_mode+0x9c>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fb01 	bl	80014c0 <siprintf>

	      /* Send mode command */
	      buffer_send_string(command, esp82xx_port);
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <esp82xx_sta_mode+0x98>)
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fcd1 	bl	8000870 <buffer_send_string>

     /*Wait for "OK" response*/
 	while(! (is_response("OK\r\n"))){}
 8000ece:	bf00      	nop
 8000ed0:	481a      	ldr	r0, [pc, #104]	; (8000f3c <esp82xx_sta_mode+0xa0>)
 8000ed2:	f7ff fc51 	bl	8000778 <is_response>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f9      	beq.n	8000ed0 <esp82xx_sta_mode+0x34>

 	/* Provide feedback based on mode */
 	    if (config->mode == 1) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d106      	bne.n	8000ef2 <esp82xx_sta_mode+0x56>
 	        buffer_send_string("Mode station set successfully...\n\r", debug_port);
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <esp82xx_sta_mode+0xa4>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4816      	ldr	r0, [pc, #88]	; (8000f44 <esp82xx_sta_mode+0xa8>)
 8000eec:	f7ff fcc0 	bl	8000870 <buffer_send_string>
 	    } else if (config->mode == 3) {
 	        buffer_send_string("SoftAP+Station mode set successfully...\n\r", debug_port);
 	    } else {
 	        buffer_send_string("Unknown mode...\n\r", debug_port);
 	    }
 	}
 8000ef0:	e01b      	b.n	8000f2a <esp82xx_sta_mode+0x8e>
 	    } else if (config->mode == 2) {
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d106      	bne.n	8000f08 <esp82xx_sta_mode+0x6c>
 	        buffer_send_string("SoftAP mode set successfully...\n\r", debug_port);
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <esp82xx_sta_mode+0xa4>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <esp82xx_sta_mode+0xac>)
 8000f02:	f7ff fcb5 	bl	8000870 <buffer_send_string>
 	}
 8000f06:	e010      	b.n	8000f2a <esp82xx_sta_mode+0x8e>
 	    } else if (config->mode == 3) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d106      	bne.n	8000f1e <esp82xx_sta_mode+0x82>
 	        buffer_send_string("SoftAP+Station mode set successfully...\n\r", debug_port);
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <esp82xx_sta_mode+0xa4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <esp82xx_sta_mode+0xb0>)
 8000f18:	f7ff fcaa 	bl	8000870 <buffer_send_string>
 	}
 8000f1c:	e005      	b.n	8000f2a <esp82xx_sta_mode+0x8e>
 	        buffer_send_string("Unknown mode...\n\r", debug_port);
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <esp82xx_sta_mode+0xa4>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <esp82xx_sta_mode+0xb4>)
 8000f26:	f7ff fca3 	bl	8000870 <buffer_send_string>
 	}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000
 8000f38:	08002934 	.word	0x08002934
 8000f3c:	080028e8 	.word	0x080028e8
 8000f40:	20000078 	.word	0x20000078
 8000f44:	08002944 	.word	0x08002944
 8000f48:	08002968 	.word	0x08002968
 8000f4c:	0800298c 	.word	0x0800298c
 8000f50:	080029b8 	.word	0x080029b8

08000f54 <esp82xx_ap_connect>:


  /*Connect to Access Apoint (AP)*/

  static void esp82xx_ap_connect(ESP_Config *config)
   {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b096      	sub	sp, #88	; 0x58
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  	 char data[80];

  	 /*Clear esp uart buffer*/
  	 buffer_clear(esp82xx_port);
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <esp82xx_ap_connect+0x74>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa3f 	bl	80003e4 <buffer_clear>

  	 buffer_send_string("Connecting to access point...\n\r",debug_port);
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <esp82xx_ap_connect+0x78>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <esp82xx_ap_connect+0x7c>)
 8000f6e:	f7ff fc7f 	bl	8000870 <buffer_send_string>

  	 /*Put ssid,password  and command into one packet*/
  	 sprintf(data,"AT+CWJAP=\"%s\",\"%s\"\r\n" ,config->ssid, config->password);
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3330      	adds	r3, #48	; 0x30
 8000f78:	f107 0008 	add.w	r0, r7, #8
 8000f7c:	4915      	ldr	r1, [pc, #84]	; (8000fd4 <esp82xx_ap_connect+0x80>)
 8000f7e:	f000 fa9f 	bl	80014c0 <siprintf>

  	 /*Send entire packet to esp uart*/
  	 buffer_send_string(data,esp82xx_port);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <esp82xx_ap_connect+0x74>)
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fc6f 	bl	8000870 <buffer_send_string>

  	  /*Wait for "OK" response*/
  	 while(! (is_response("OK\r\n"))){}
 8000f92:	bf00      	nop
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <esp82xx_ap_connect+0x84>)
 8000f96:	f7ff fbef 	bl	8000778 <is_response>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f9      	beq.n	8000f94 <esp82xx_ap_connect+0x40>

  	 sprintf(data, "Connected : \"%s\"\r\n",config->ssid);
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <esp82xx_ap_connect+0x88>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fa89 	bl	80014c0 <siprintf>

  	 buffer_send_string(data,debug_port);
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <esp82xx_ap_connect+0x78>)
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fc59 	bl	8000870 <buffer_send_string>

   }
 8000fbe:	bf00      	nop
 8000fc0:	3758      	adds	r7, #88	; 0x58
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000078 	.word	0x20000078
 8000fd0:	080029cc 	.word	0x080029cc
 8000fd4:	080029ec 	.word	0x080029ec
 8000fd8:	080028e8 	.word	0x080028e8
 8000fdc:	08002a04 	.word	0x08002a04

08000fe0 <esp82xx_get_local_ip>:

 /*Get device local IP address*/

  static void esp82xx_get_local_ip(void)
 {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09a      	sub	sp, #104	; 0x68
 8000fe4:	af00      	add	r7, sp, #0
	 char data[80];
	 char buffer[20];
	 int len;

	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <esp82xx_get_local_ip+0x8c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff f9fa 	bl	80003e4 <buffer_clear>

	 /*Send 'get ip address ' command*/
	 buffer_send_string("AT+CIFSR\r\n",esp82xx_port);
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <esp82xx_get_local_ip+0x8c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481e      	ldr	r0, [pc, #120]	; (8001070 <esp82xx_get_local_ip+0x90>)
 8000ff8:	f7ff fc3a 	bl	8000870 <buffer_send_string>

	 /*Wait for 'Station IP'  response*/
	 while(!(is_response("CIFSR:STAIP,\""))){}
 8000ffc:	bf00      	nop
 8000ffe:	481d      	ldr	r0, [pc, #116]	; (8001074 <esp82xx_get_local_ip+0x94>)
 8001000:	f7ff fbba 	bl	8000778 <is_response>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f9      	beq.n	8000ffe <esp82xx_get_local_ip+0x1e>

	 /*Copy IP address portion*/
	 while(!(copy_up_to_string("\"",buffer))){}
 800100a:	bf00      	nop
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <esp82xx_get_local_ip+0x98>)
 8001012:	f7ff fcd9 	bl	80009c8 <copy_up_to_string>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f7      	beq.n	800100c <esp82xx_get_local_ip+0x2c>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 800101c:	bf00      	nop
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <esp82xx_get_local_ip+0x9c>)
 8001020:	f7ff fbaa 	bl	8000778 <is_response>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f9      	beq.n	800101e <esp82xx_get_local_ip+0x3e>

	 len = strlen(buffer);
 800102a:	463b      	mov	r3, r7
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f8e1 	bl	80001f4 <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	667b      	str	r3, [r7, #100]	; 0x64

	 buffer[len - 1] = '\0';
 8001036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001038:	3b01      	subs	r3, #1
 800103a:	3368      	adds	r3, #104	; 0x68
 800103c:	443b      	add	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	f803 2c68 	strb.w	r2, [r3, #-104]

	 sprintf(data,"Local IP Address :  %s \r\n",buffer);
 8001044:	463a      	mov	r2, r7
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	490d      	ldr	r1, [pc, #52]	; (8001080 <esp82xx_get_local_ip+0xa0>)
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fa37 	bl	80014c0 <siprintf>

	 buffer_send_string(data,debug_port);
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <esp82xx_get_local_ip+0xa4>)
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fc07 	bl	8000870 <buffer_send_string>


 }
 8001062:	bf00      	nop
 8001064:	3768      	adds	r7, #104	; 0x68
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000
 8001070:	08002a18 	.word	0x08002a18
 8001074:	08002a24 	.word	0x08002a24
 8001078:	08002a34 	.word	0x08002a34
 800107c:	080028e8 	.word	0x080028e8
 8001080:	08002a38 	.word	0x08002a38
 8001084:	20000078 	.word	0x20000078

08001088 <esp82xx_multi_conn_en>:

 /*Enable multiple connections*/
  static void esp82xx_multi_conn_en(void)
 {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <esp82xx_multi_conn_en+0x38>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9a7 	bl	80003e4 <buffer_clear>

	 /*Send 'enable multi conn cmd'*/
	 buffer_send_string("AT+CIPMUX=1\r\n",esp82xx_port);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <esp82xx_multi_conn_en+0x38>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <esp82xx_multi_conn_en+0x3c>)
 800109e:	f7ff fbe7 	bl	8000870 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 80010a2:	bf00      	nop
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <esp82xx_multi_conn_en+0x40>)
 80010a6:	f7ff fb67 	bl	8000778 <is_response>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f9      	beq.n	80010a4 <esp82xx_multi_conn_en+0x1c>

	 buffer_send_string("Multiple connections enabled....\n\r",debug_port);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <esp82xx_multi_conn_en+0x44>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <esp82xx_multi_conn_en+0x48>)
 80010b8:	f7ff fbda 	bl	8000870 <buffer_send_string>

 }
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	08002a54 	.word	0x08002a54
 80010c8:	080028e8 	.word	0x080028e8
 80010cc:	20000078 	.word	0x20000078
 80010d0:	08002a64 	.word	0x08002a64

080010d4 <esp82xx_create_tcp_server>:


 /*Creat tcp server*/

  static void esp82xx_create_tcp_server(void)
 {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <esp82xx_create_tcp_server+0x38>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f981 	bl	80003e4 <buffer_clear>

	 /*Send 'create tcp server cmd'*/
	 buffer_send_string("AT+CIPSERVER=1,80\r\n",esp82xx_port);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <esp82xx_create_tcp_server+0x38>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <esp82xx_create_tcp_server+0x3c>)
 80010ea:	f7ff fbc1 	bl	8000870 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 80010ee:	bf00      	nop
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <esp82xx_create_tcp_server+0x40>)
 80010f2:	f7ff fb41 	bl	8000778 <is_response>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f9      	beq.n	80010f0 <esp82xx_create_tcp_server+0x1c>

	 buffer_send_string("Please connect to the Local IP above....\n\r",debug_port);
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <esp82xx_create_tcp_server+0x44>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <esp82xx_create_tcp_server+0x48>)
 8001104:	f7ff fbb4 	bl	8000870 <buffer_send_string>

 }
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	08002a88 	.word	0x08002a88
 8001114:	080028e8 	.word	0x080028e8
 8001118:	20000078 	.word	0x20000078
 800111c:	08002a9c 	.word	0x08002a9c

08001120 <send_server_data>:


 /*Send data to the server*/

 static int8_t send_server_data(char *str , int Link_ID)
  {
 8001120:	b580      	push	{r7, lr}
 8001122:	b098      	sub	sp, #96	; 0x60
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
 	 char data[80];

 	 /*Get length of data to send*/
 	 int len = strlen(str);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff f862 	bl	80001f4 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c

 	 /*Send link id and data length*/
 	 sprintf(data,"AT+CIPSEND=%d,%d\r\n",Link_ID,len);
 8001134:	f107 000c 	add.w	r0, r7, #12
 8001138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	491c      	ldr	r1, [pc, #112]	; (80011b0 <send_server_data+0x90>)
 800113e:	f000 f9bf 	bl	80014c0 <siprintf>
 	 buffer_send_string(data,esp82xx_port);
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <send_server_data+0x94>)
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fb8f 	bl	8000870 <buffer_send_string>

 	  /*Wait for ">" response*/
 	  while(! (is_response(">"))){}
 8001152:	bf00      	nop
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <send_server_data+0x98>)
 8001156:	f7ff fb0f 	bl	8000778 <is_response>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f9      	beq.n	8001154 <send_server_data+0x34>

 	  /*Send data*/
 	  buffer_send_string(str,esp82xx_port);
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <send_server_data+0x94>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fb82 	bl	8000870 <buffer_send_string>

 	  /*Wait for "SEND OK" response*/
 	   while(! (is_response("SEND OK"))){}
 800116c:	bf00      	nop
 800116e:	4813      	ldr	r0, [pc, #76]	; (80011bc <send_server_data+0x9c>)
 8001170:	f7ff fb02 	bl	8000778 <is_response>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f9      	beq.n	800116e <send_server_data+0x4e>

 	  /*Close connection*/
 	   sprintf(data,"AT+CIPCLOSE=5\r\n");
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4910      	ldr	r1, [pc, #64]	; (80011c0 <send_server_data+0xa0>)
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f99d 	bl	80014c0 <siprintf>
 	   buffer_send_string(data,esp82xx_port);
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <send_server_data+0x94>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fb6d 	bl	8000870 <buffer_send_string>

 		/*Wait for "OK" response*/
 	   while(! (is_response("OK\r\n"))){}
 8001196:	bf00      	nop
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <send_server_data+0xa4>)
 800119a:	f7ff faed 	bl	8000778 <is_response>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f9      	beq.n	8001198 <send_server_data+0x78>

 	   return 1;
 80011a4:	2301      	movs	r3, #1

  }
 80011a6:	4618      	mov	r0, r3
 80011a8:	3760      	adds	r7, #96	; 0x60
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08002ac8 	.word	0x08002ac8
 80011b4:	20000000 	.word	0x20000000
 80011b8:	08002adc 	.word	0x08002adc
 80011bc:	08002ae0 	.word	0x08002ae0
 80011c0:	08002ae8 	.word	0x08002ae8
 80011c4:	080028e8 	.word	0x080028e8

080011c8 <Server_Handle>:
 void Server_Handle (char *str, int Link_ID)
 {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]

 	if (!(strcmp (str, "/ledon")))
 80011d2:	4913      	ldr	r1, [pc, #76]	; (8001220 <Server_Handle+0x58>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff f803 	bl	80001e0 <strcmp>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <Server_Handle+0x26>
 	{

 		send_server_data(light, Link_ID);
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <Server_Handle+0x5c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff9a 	bl	8001120 <send_server_data>
 	else
 	{
 		send_server_data(home, Link_ID);
 	}

 }
 80011ec:	e013      	b.n	8001216 <Server_Handle+0x4e>
 	else if (!(strcmp (str, "/ledoff")))
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <Server_Handle+0x60>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7fe fff5 	bl	80001e0 <strcmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <Server_Handle+0x42>
 		send_server_data(home, Link_ID);
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <Server_Handle+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff8c 	bl	8001120 <send_server_data>
 }
 8001208:	e005      	b.n	8001216 <Server_Handle+0x4e>
 		send_server_data(home, Link_ID);
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <Server_Handle+0x64>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff85 	bl	8001120 <send_server_data>
 }
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	08002af8 	.word	0x08002af8
 8001224:	20000008 	.word	0x20000008
 8001228:	08002b00 	.word	0x08002b00
 800122c:	20000004 	.word	0x20000004

08001230 <server_begin>:




  	void server_begin(void)
  	 {
 8001230:	b580      	push	{r7, lr}
 8001232:	b092      	sub	sp, #72	; 0x48
 8001234:	af00      	add	r7, sp, #0
  		 char dest_buffer[64] ={0};
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	223c      	movs	r2, #60	; 0x3c
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f95c 	bl	8001500 <memset>
  		 char link_id;

  		 while(!(get_next_strs("+IPD,",1,&link_id))){}
 8001248:	bf00      	nop
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	461a      	mov	r2, r3
 800124e:	2101      	movs	r1, #1
 8001250:	482a      	ldr	r0, [pc, #168]	; (80012fc <server_begin+0xcc>)
 8001252:	f7ff fad9 	bl	8000808 <get_next_strs>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f6      	beq.n	800124a <server_begin+0x1a>

  		 link_id -=48;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	3b30      	subs	r3, #48	; 0x30
 8001260:	b2db      	uxtb	r3, r3
 8001262:	71fb      	strb	r3, [r7, #7]

  		 while(!(copy_up_to_string("HTTP/1.1",dest_buffer))){};
 8001264:	bf00      	nop
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4619      	mov	r1, r3
 800126c:	4824      	ldr	r0, [pc, #144]	; (8001300 <server_begin+0xd0>)
 800126e:	f7ff fbab 	bl	80009c8 <copy_up_to_string>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f6      	beq.n	8001266 <server_begin+0x36>



  		 if(find_str("/ledon",dest_buffer)== 1)
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4619      	mov	r1, r3
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <server_begin+0xd4>)
 8001280:	f7ff f86d 	bl	800035e <find_str>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10d      	bne.n	80012a6 <server_begin+0x76>
  			{

  			Server_Handle("/ledon",link_id);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4619      	mov	r1, r3
 800128e:	481d      	ldr	r0, [pc, #116]	; (8001304 <server_begin+0xd4>)
 8001290:	f7ff ff9a 	bl	80011c8 <Server_Handle>



  				 light_on();
 8001294:	f000 f86e 	bl	8001374 <light_on>


  				 buffer_send_string("\r\nLight module is on..\r\n",debug_port);
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <server_begin+0xd8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <server_begin+0xdc>)
 80012a0:	f7ff fae6 	bl	8000870 <buffer_send_string>
 		light_off();
 		Server_Handle("/ ", link_id);
 	}


  	 }
 80012a4:	e026      	b.n	80012f4 <server_begin+0xc4>
  		else if (find_str("/ledoff",dest_buffer)== 1)
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	4818      	ldr	r0, [pc, #96]	; (8001310 <server_begin+0xe0>)
 80012ae:	f7ff f856 	bl	800035e <find_str>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10d      	bne.n	80012d4 <server_begin+0xa4>
  			 Server_Handle("/ledoff",link_id);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <server_begin+0xe0>)
 80012be:	f7ff ff83 	bl	80011c8 <Server_Handle>
  			 light_off();
 80012c2:	f000 f867 	bl	8001394 <light_off>
  			buffer_send_string("\r\nLight module is off...\r\n",debug_port);
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <server_begin+0xd8>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <server_begin+0xe4>)
 80012ce:	f7ff facf 	bl	8000870 <buffer_send_string>
  	 }
 80012d2:	e00f      	b.n	80012f4 <server_begin+0xc4>
            else if (find_str("/favicon.ico", dest_buffer) == 1);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <server_begin+0xe8>)
 80012dc:	f7ff f83f 	bl	800035e <find_str>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d006      	beq.n	80012f4 <server_begin+0xc4>
 		light_off();
 80012e6:	f000 f855 	bl	8001394 <light_off>
 		Server_Handle("/ ", link_id);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <server_begin+0xec>)
 80012f0:	f7ff ff6a 	bl	80011c8 <Server_Handle>
  	 }
 80012f4:	bf00      	nop
 80012f6:	3748      	adds	r7, #72	; 0x48
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08002b08 	.word	0x08002b08
 8001300:	08002b10 	.word	0x08002b10
 8001304:	08002af8 	.word	0x08002af8
 8001308:	20000078 	.word	0x20000078
 800130c:	08002b1c 	.word	0x08002b1c
 8001310:	08002b00 	.word	0x08002b00
 8001314:	08002b38 	.word	0x08002b38
 8001318:	08002b54 	.word	0x08002b54
 800131c:	08002b64 	.word	0x08002b64

08001320 <USART1_IRQHandler>:



  void USART1_IRQHandler(void)
 	 {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
 	 	esp82_uart_callback();
 8001324:	f7ff fb60 	bl	80009e8 <esp82_uart_callback>
 	 }
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <USART2_IRQHandler>:


 	 void USART2_IRQHandler(void)
 	 {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
 	 	debug_uart_callback();
 8001330:	f7ff fbaa 	bl	8000a88 <debug_uart_callback>
  }
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <light_int>:
#include "hardware_module.h"
#define GPIOA_EN   (1U<<0)

	void light_int(void){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	//enable clock access to the PA port
	RCC->AHB2ENR  |=GPIOA_EN;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <light_int+0x34>)
 800133e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <light_int+0x34>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6353      	str	r3, [r2, #52]	; 0x34
	// set pin pa5 to output
	GPIOA -> MODER |=  (1U<<10);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <light_int+0x38>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <light_int+0x38>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &=~(1U<<11);
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <light_int+0x38>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <light_int+0x38>)
 800135a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800135e:	6013      	str	r3, [r2, #0]
	}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000

08001374 <light_on>:
	void light_on(void)
	{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
		/*Set PA5 output to high*/
		GPIOA->ODR |=(1U<<5);
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <light_on+0x1c>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <light_on+0x1c>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6153      	str	r3, [r2, #20]
	}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40020000 	.word	0x40020000

08001394 <light_off>:

	void light_off(void)
	{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
		/*Set PA5 output to LOW*/
		GPIOA->ODR &=~(1U<<5);
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <light_off+0x1c>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <light_off+0x1c>)
 800139e:	f023 0320 	bic.w	r3, r3, #32
 80013a2:	6153      	str	r3, [r2, #20]
	}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40020000 	.word	0x40020000

080013b4 <main>:

#define SSID_NAME  "Cred_Intern"
#define PASSKEY    "cred@2024+"

int main()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b09a      	sub	sp, #104	; 0x68
 80013b8:	af00      	add	r7, sp, #0


   /*Initialize debug uart*/
   debug_uart_init();
 80013ba:	f7ff fbd3 	bl	8000b64 <debug_uart_init>
   esp_uart_init();
 80013be:	f7ff fc4d 	bl	8000c5c <esp_uart_init>
   /*Initialize hardware module*/
   light_int();
 80013c2:	f7ff ffb9 	bl	8001338 <light_int>

   /*Initialize circular buffer*/
   circular_buffer_init();
 80013c6:	f7fe ff73 	bl	80002b0 <circular_buffer_init>
   /*esp configuration functions*/
	ESP_Config esp_config;
	    strcpy(esp_config.ssid, SSID_NAME);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <main+0x44>)
 80013ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    strcpy(esp_config.password, PASSKEY);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <main+0x48>)
 80013da:	ca07      	ldmia	r2, {r0, r1, r2}
 80013dc:	c303      	stmia	r3!, {r0, r1}
 80013de:	801a      	strh	r2, [r3, #0]
 80013e0:	3302      	adds	r3, #2
 80013e2:	0c12      	lsrs	r2, r2, #16
 80013e4:	701a      	strb	r2, [r3, #0]
	    esp_config.mode = 1; // Set mode to 1 for station mode, adjust as needed
 80013e6:	2301      	movs	r3, #1
 80013e8:	667b      	str	r3, [r7, #100]	; 0x64

	    esp82xx_sever_init(&esp_config);
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fcee 	bl	8000dce <esp82xx_sever_init>

while(1)
	{

	server_begin();
 80013f2:	f7ff ff1d 	bl	8001230 <server_begin>
 80013f6:	e7fc      	b.n	80013f2 <main+0x3e>
 80013f8:	08002b68 	.word	0x08002b68
 80013fc:	08002b74 	.word	0x08002b74

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f000 f86e 	bl	8001510 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20018000 	.word	0x20018000
 8001460:	00000400 	.word	0x00000400
 8001464:	200008ac 	.word	0x200008ac
 8001468:	200009f8 	.word	0x200009f8

0800146c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800149a:	f000 f83f 	bl	800151c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149e:	f7ff ff89 	bl	80013b4 <main>

080014a2 <LoopForever>:

LoopForever:
  b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   r0, =_estack
 80014a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014b0:	08002bbc 	.word	0x08002bbc
  ldr r2, =_sbss
 80014b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014b8:	200009f8 	.word	0x200009f8

080014bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC_IRQHandler>
	...

080014c0 <siprintf>:
 80014c0:	b40e      	push	{r1, r2, r3}
 80014c2:	b500      	push	{lr}
 80014c4:	b09c      	sub	sp, #112	; 0x70
 80014c6:	ab1d      	add	r3, sp, #116	; 0x74
 80014c8:	9002      	str	r0, [sp, #8]
 80014ca:	9006      	str	r0, [sp, #24]
 80014cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <siprintf+0x38>)
 80014d2:	9107      	str	r1, [sp, #28]
 80014d4:	9104      	str	r1, [sp, #16]
 80014d6:	4909      	ldr	r1, [pc, #36]	; (80014fc <siprintf+0x3c>)
 80014d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80014dc:	9105      	str	r1, [sp, #20]
 80014de:	6800      	ldr	r0, [r0, #0]
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	a902      	add	r1, sp, #8
 80014e4:	f000 f992 	bl	800180c <_svfiprintf_r>
 80014e8:	9b02      	ldr	r3, [sp, #8]
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	b01c      	add	sp, #112	; 0x70
 80014f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80014f4:	b003      	add	sp, #12
 80014f6:	4770      	bx	lr
 80014f8:	20000058 	.word	0x20000058
 80014fc:	ffff0208 	.word	0xffff0208

08001500 <memset>:
 8001500:	4402      	add	r2, r0
 8001502:	4603      	mov	r3, r0
 8001504:	4293      	cmp	r3, r2
 8001506:	d100      	bne.n	800150a <memset+0xa>
 8001508:	4770      	bx	lr
 800150a:	f803 1b01 	strb.w	r1, [r3], #1
 800150e:	e7f9      	b.n	8001504 <memset+0x4>

08001510 <__errno>:
 8001510:	4b01      	ldr	r3, [pc, #4]	; (8001518 <__errno+0x8>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000058 	.word	0x20000058

0800151c <__libc_init_array>:
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	4d0d      	ldr	r5, [pc, #52]	; (8001554 <__libc_init_array+0x38>)
 8001520:	4c0d      	ldr	r4, [pc, #52]	; (8001558 <__libc_init_array+0x3c>)
 8001522:	1b64      	subs	r4, r4, r5
 8001524:	10a4      	asrs	r4, r4, #2
 8001526:	2600      	movs	r6, #0
 8001528:	42a6      	cmp	r6, r4
 800152a:	d109      	bne.n	8001540 <__libc_init_array+0x24>
 800152c:	4d0b      	ldr	r5, [pc, #44]	; (800155c <__libc_init_array+0x40>)
 800152e:	4c0c      	ldr	r4, [pc, #48]	; (8001560 <__libc_init_array+0x44>)
 8001530:	f000 fc6a 	bl	8001e08 <_init>
 8001534:	1b64      	subs	r4, r4, r5
 8001536:	10a4      	asrs	r4, r4, #2
 8001538:	2600      	movs	r6, #0
 800153a:	42a6      	cmp	r6, r4
 800153c:	d105      	bne.n	800154a <__libc_init_array+0x2e>
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	f855 3b04 	ldr.w	r3, [r5], #4
 8001544:	4798      	blx	r3
 8001546:	3601      	adds	r6, #1
 8001548:	e7ee      	b.n	8001528 <__libc_init_array+0xc>
 800154a:	f855 3b04 	ldr.w	r3, [r5], #4
 800154e:	4798      	blx	r3
 8001550:	3601      	adds	r6, #1
 8001552:	e7f2      	b.n	800153a <__libc_init_array+0x1e>
 8001554:	08002bb4 	.word	0x08002bb4
 8001558:	08002bb4 	.word	0x08002bb4
 800155c:	08002bb4 	.word	0x08002bb4
 8001560:	08002bb8 	.word	0x08002bb8

08001564 <__retarget_lock_acquire_recursive>:
 8001564:	4770      	bx	lr

08001566 <__retarget_lock_release_recursive>:
 8001566:	4770      	bx	lr

08001568 <_free_r>:
 8001568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800156a:	2900      	cmp	r1, #0
 800156c:	d044      	beq.n	80015f8 <_free_r+0x90>
 800156e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001572:	9001      	str	r0, [sp, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f1a1 0404 	sub.w	r4, r1, #4
 800157a:	bfb8      	it	lt
 800157c:	18e4      	addlt	r4, r4, r3
 800157e:	f000 f8df 	bl	8001740 <__malloc_lock>
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <_free_r+0x94>)
 8001584:	9801      	ldr	r0, [sp, #4]
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	b933      	cbnz	r3, 8001598 <_free_r+0x30>
 800158a:	6063      	str	r3, [r4, #4]
 800158c:	6014      	str	r4, [r2, #0]
 800158e:	b003      	add	sp, #12
 8001590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001594:	f000 b8da 	b.w	800174c <__malloc_unlock>
 8001598:	42a3      	cmp	r3, r4
 800159a:	d908      	bls.n	80015ae <_free_r+0x46>
 800159c:	6825      	ldr	r5, [r4, #0]
 800159e:	1961      	adds	r1, r4, r5
 80015a0:	428b      	cmp	r3, r1
 80015a2:	bf01      	itttt	eq
 80015a4:	6819      	ldreq	r1, [r3, #0]
 80015a6:	685b      	ldreq	r3, [r3, #4]
 80015a8:	1949      	addeq	r1, r1, r5
 80015aa:	6021      	streq	r1, [r4, #0]
 80015ac:	e7ed      	b.n	800158a <_free_r+0x22>
 80015ae:	461a      	mov	r2, r3
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	b10b      	cbz	r3, 80015b8 <_free_r+0x50>
 80015b4:	42a3      	cmp	r3, r4
 80015b6:	d9fa      	bls.n	80015ae <_free_r+0x46>
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	1855      	adds	r5, r2, r1
 80015bc:	42a5      	cmp	r5, r4
 80015be:	d10b      	bne.n	80015d8 <_free_r+0x70>
 80015c0:	6824      	ldr	r4, [r4, #0]
 80015c2:	4421      	add	r1, r4
 80015c4:	1854      	adds	r4, r2, r1
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	6011      	str	r1, [r2, #0]
 80015ca:	d1e0      	bne.n	800158e <_free_r+0x26>
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	6053      	str	r3, [r2, #4]
 80015d2:	440c      	add	r4, r1
 80015d4:	6014      	str	r4, [r2, #0]
 80015d6:	e7da      	b.n	800158e <_free_r+0x26>
 80015d8:	d902      	bls.n	80015e0 <_free_r+0x78>
 80015da:	230c      	movs	r3, #12
 80015dc:	6003      	str	r3, [r0, #0]
 80015de:	e7d6      	b.n	800158e <_free_r+0x26>
 80015e0:	6825      	ldr	r5, [r4, #0]
 80015e2:	1961      	adds	r1, r4, r5
 80015e4:	428b      	cmp	r3, r1
 80015e6:	bf04      	itt	eq
 80015e8:	6819      	ldreq	r1, [r3, #0]
 80015ea:	685b      	ldreq	r3, [r3, #4]
 80015ec:	6063      	str	r3, [r4, #4]
 80015ee:	bf04      	itt	eq
 80015f0:	1949      	addeq	r1, r1, r5
 80015f2:	6021      	streq	r1, [r4, #0]
 80015f4:	6054      	str	r4, [r2, #4]
 80015f6:	e7ca      	b.n	800158e <_free_r+0x26>
 80015f8:	b003      	add	sp, #12
 80015fa:	bd30      	pop	{r4, r5, pc}
 80015fc:	200009f0 	.word	0x200009f0

08001600 <sbrk_aligned>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	4e0e      	ldr	r6, [pc, #56]	; (800163c <sbrk_aligned+0x3c>)
 8001604:	460c      	mov	r4, r1
 8001606:	6831      	ldr	r1, [r6, #0]
 8001608:	4605      	mov	r5, r0
 800160a:	b911      	cbnz	r1, 8001612 <sbrk_aligned+0x12>
 800160c:	f000 fba6 	bl	8001d5c <_sbrk_r>
 8001610:	6030      	str	r0, [r6, #0]
 8001612:	4621      	mov	r1, r4
 8001614:	4628      	mov	r0, r5
 8001616:	f000 fba1 	bl	8001d5c <_sbrk_r>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	d00a      	beq.n	8001634 <sbrk_aligned+0x34>
 800161e:	1cc4      	adds	r4, r0, #3
 8001620:	f024 0403 	bic.w	r4, r4, #3
 8001624:	42a0      	cmp	r0, r4
 8001626:	d007      	beq.n	8001638 <sbrk_aligned+0x38>
 8001628:	1a21      	subs	r1, r4, r0
 800162a:	4628      	mov	r0, r5
 800162c:	f000 fb96 	bl	8001d5c <_sbrk_r>
 8001630:	3001      	adds	r0, #1
 8001632:	d101      	bne.n	8001638 <sbrk_aligned+0x38>
 8001634:	f04f 34ff 	mov.w	r4, #4294967295
 8001638:	4620      	mov	r0, r4
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	200009f4 	.word	0x200009f4

08001640 <_malloc_r>:
 8001640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001644:	1ccd      	adds	r5, r1, #3
 8001646:	f025 0503 	bic.w	r5, r5, #3
 800164a:	3508      	adds	r5, #8
 800164c:	2d0c      	cmp	r5, #12
 800164e:	bf38      	it	cc
 8001650:	250c      	movcc	r5, #12
 8001652:	2d00      	cmp	r5, #0
 8001654:	4607      	mov	r7, r0
 8001656:	db01      	blt.n	800165c <_malloc_r+0x1c>
 8001658:	42a9      	cmp	r1, r5
 800165a:	d905      	bls.n	8001668 <_malloc_r+0x28>
 800165c:	230c      	movs	r3, #12
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	2600      	movs	r6, #0
 8001662:	4630      	mov	r0, r6
 8001664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001668:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800173c <_malloc_r+0xfc>
 800166c:	f000 f868 	bl	8001740 <__malloc_lock>
 8001670:	f8d8 3000 	ldr.w	r3, [r8]
 8001674:	461c      	mov	r4, r3
 8001676:	bb5c      	cbnz	r4, 80016d0 <_malloc_r+0x90>
 8001678:	4629      	mov	r1, r5
 800167a:	4638      	mov	r0, r7
 800167c:	f7ff ffc0 	bl	8001600 <sbrk_aligned>
 8001680:	1c43      	adds	r3, r0, #1
 8001682:	4604      	mov	r4, r0
 8001684:	d155      	bne.n	8001732 <_malloc_r+0xf2>
 8001686:	f8d8 4000 	ldr.w	r4, [r8]
 800168a:	4626      	mov	r6, r4
 800168c:	2e00      	cmp	r6, #0
 800168e:	d145      	bne.n	800171c <_malloc_r+0xdc>
 8001690:	2c00      	cmp	r4, #0
 8001692:	d048      	beq.n	8001726 <_malloc_r+0xe6>
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	4631      	mov	r1, r6
 8001698:	4638      	mov	r0, r7
 800169a:	eb04 0903 	add.w	r9, r4, r3
 800169e:	f000 fb5d 	bl	8001d5c <_sbrk_r>
 80016a2:	4581      	cmp	r9, r0
 80016a4:	d13f      	bne.n	8001726 <_malloc_r+0xe6>
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	1a6d      	subs	r5, r5, r1
 80016aa:	4629      	mov	r1, r5
 80016ac:	4638      	mov	r0, r7
 80016ae:	f7ff ffa7 	bl	8001600 <sbrk_aligned>
 80016b2:	3001      	adds	r0, #1
 80016b4:	d037      	beq.n	8001726 <_malloc_r+0xe6>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	442b      	add	r3, r5
 80016ba:	6023      	str	r3, [r4, #0]
 80016bc:	f8d8 3000 	ldr.w	r3, [r8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d038      	beq.n	8001736 <_malloc_r+0xf6>
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	42a2      	cmp	r2, r4
 80016c8:	d12b      	bne.n	8001722 <_malloc_r+0xe2>
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e00f      	b.n	80016f0 <_malloc_r+0xb0>
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	1b52      	subs	r2, r2, r5
 80016d4:	d41f      	bmi.n	8001716 <_malloc_r+0xd6>
 80016d6:	2a0b      	cmp	r2, #11
 80016d8:	d917      	bls.n	800170a <_malloc_r+0xca>
 80016da:	1961      	adds	r1, r4, r5
 80016dc:	42a3      	cmp	r3, r4
 80016de:	6025      	str	r5, [r4, #0]
 80016e0:	bf18      	it	ne
 80016e2:	6059      	strne	r1, [r3, #4]
 80016e4:	6863      	ldr	r3, [r4, #4]
 80016e6:	bf08      	it	eq
 80016e8:	f8c8 1000 	streq.w	r1, [r8]
 80016ec:	5162      	str	r2, [r4, r5]
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	4638      	mov	r0, r7
 80016f2:	f104 060b 	add.w	r6, r4, #11
 80016f6:	f000 f829 	bl	800174c <__malloc_unlock>
 80016fa:	f026 0607 	bic.w	r6, r6, #7
 80016fe:	1d23      	adds	r3, r4, #4
 8001700:	1af2      	subs	r2, r6, r3
 8001702:	d0ae      	beq.n	8001662 <_malloc_r+0x22>
 8001704:	1b9b      	subs	r3, r3, r6
 8001706:	50a3      	str	r3, [r4, r2]
 8001708:	e7ab      	b.n	8001662 <_malloc_r+0x22>
 800170a:	42a3      	cmp	r3, r4
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	d1dd      	bne.n	80016cc <_malloc_r+0x8c>
 8001710:	f8c8 2000 	str.w	r2, [r8]
 8001714:	e7ec      	b.n	80016f0 <_malloc_r+0xb0>
 8001716:	4623      	mov	r3, r4
 8001718:	6864      	ldr	r4, [r4, #4]
 800171a:	e7ac      	b.n	8001676 <_malloc_r+0x36>
 800171c:	4634      	mov	r4, r6
 800171e:	6876      	ldr	r6, [r6, #4]
 8001720:	e7b4      	b.n	800168c <_malloc_r+0x4c>
 8001722:	4613      	mov	r3, r2
 8001724:	e7cc      	b.n	80016c0 <_malloc_r+0x80>
 8001726:	230c      	movs	r3, #12
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4638      	mov	r0, r7
 800172c:	f000 f80e 	bl	800174c <__malloc_unlock>
 8001730:	e797      	b.n	8001662 <_malloc_r+0x22>
 8001732:	6025      	str	r5, [r4, #0]
 8001734:	e7dc      	b.n	80016f0 <_malloc_r+0xb0>
 8001736:	605b      	str	r3, [r3, #4]
 8001738:	deff      	udf	#255	; 0xff
 800173a:	bf00      	nop
 800173c:	200009f0 	.word	0x200009f0

08001740 <__malloc_lock>:
 8001740:	4801      	ldr	r0, [pc, #4]	; (8001748 <__malloc_lock+0x8>)
 8001742:	f7ff bf0f 	b.w	8001564 <__retarget_lock_acquire_recursive>
 8001746:	bf00      	nop
 8001748:	200009ec 	.word	0x200009ec

0800174c <__malloc_unlock>:
 800174c:	4801      	ldr	r0, [pc, #4]	; (8001754 <__malloc_unlock+0x8>)
 800174e:	f7ff bf0a 	b.w	8001566 <__retarget_lock_release_recursive>
 8001752:	bf00      	nop
 8001754:	200009ec 	.word	0x200009ec

08001758 <__ssputs_r>:
 8001758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800175c:	688e      	ldr	r6, [r1, #8]
 800175e:	461f      	mov	r7, r3
 8001760:	42be      	cmp	r6, r7
 8001762:	680b      	ldr	r3, [r1, #0]
 8001764:	4682      	mov	sl, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4690      	mov	r8, r2
 800176a:	d82c      	bhi.n	80017c6 <__ssputs_r+0x6e>
 800176c:	898a      	ldrh	r2, [r1, #12]
 800176e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001772:	d026      	beq.n	80017c2 <__ssputs_r+0x6a>
 8001774:	6965      	ldr	r5, [r4, #20]
 8001776:	6909      	ldr	r1, [r1, #16]
 8001778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800177c:	eba3 0901 	sub.w	r9, r3, r1
 8001780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001784:	1c7b      	adds	r3, r7, #1
 8001786:	444b      	add	r3, r9
 8001788:	106d      	asrs	r5, r5, #1
 800178a:	429d      	cmp	r5, r3
 800178c:	bf38      	it	cc
 800178e:	461d      	movcc	r5, r3
 8001790:	0553      	lsls	r3, r2, #21
 8001792:	d527      	bpl.n	80017e4 <__ssputs_r+0x8c>
 8001794:	4629      	mov	r1, r5
 8001796:	f7ff ff53 	bl	8001640 <_malloc_r>
 800179a:	4606      	mov	r6, r0
 800179c:	b360      	cbz	r0, 80017f8 <__ssputs_r+0xa0>
 800179e:	6921      	ldr	r1, [r4, #16]
 80017a0:	464a      	mov	r2, r9
 80017a2:	f000 faeb 	bl	8001d7c <memcpy>
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	81a3      	strh	r3, [r4, #12]
 80017b2:	6126      	str	r6, [r4, #16]
 80017b4:	6165      	str	r5, [r4, #20]
 80017b6:	444e      	add	r6, r9
 80017b8:	eba5 0509 	sub.w	r5, r5, r9
 80017bc:	6026      	str	r6, [r4, #0]
 80017be:	60a5      	str	r5, [r4, #8]
 80017c0:	463e      	mov	r6, r7
 80017c2:	42be      	cmp	r6, r7
 80017c4:	d900      	bls.n	80017c8 <__ssputs_r+0x70>
 80017c6:	463e      	mov	r6, r7
 80017c8:	6820      	ldr	r0, [r4, #0]
 80017ca:	4632      	mov	r2, r6
 80017cc:	4641      	mov	r1, r8
 80017ce:	f000 faab 	bl	8001d28 <memmove>
 80017d2:	68a3      	ldr	r3, [r4, #8]
 80017d4:	1b9b      	subs	r3, r3, r6
 80017d6:	60a3      	str	r3, [r4, #8]
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	4433      	add	r3, r6
 80017dc:	6023      	str	r3, [r4, #0]
 80017de:	2000      	movs	r0, #0
 80017e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e4:	462a      	mov	r2, r5
 80017e6:	f000 fad7 	bl	8001d98 <_realloc_r>
 80017ea:	4606      	mov	r6, r0
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d1e0      	bne.n	80017b2 <__ssputs_r+0x5a>
 80017f0:	6921      	ldr	r1, [r4, #16]
 80017f2:	4650      	mov	r0, sl
 80017f4:	f7ff feb8 	bl	8001568 <_free_r>
 80017f8:	230c      	movs	r3, #12
 80017fa:	f8ca 3000 	str.w	r3, [sl]
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	81a3      	strh	r3, [r4, #12]
 8001806:	f04f 30ff 	mov.w	r0, #4294967295
 800180a:	e7e9      	b.n	80017e0 <__ssputs_r+0x88>

0800180c <_svfiprintf_r>:
 800180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001810:	4698      	mov	r8, r3
 8001812:	898b      	ldrh	r3, [r1, #12]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	b09d      	sub	sp, #116	; 0x74
 8001818:	4607      	mov	r7, r0
 800181a:	460d      	mov	r5, r1
 800181c:	4614      	mov	r4, r2
 800181e:	d50e      	bpl.n	800183e <_svfiprintf_r+0x32>
 8001820:	690b      	ldr	r3, [r1, #16]
 8001822:	b963      	cbnz	r3, 800183e <_svfiprintf_r+0x32>
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	f7ff ff0b 	bl	8001640 <_malloc_r>
 800182a:	6028      	str	r0, [r5, #0]
 800182c:	6128      	str	r0, [r5, #16]
 800182e:	b920      	cbnz	r0, 800183a <_svfiprintf_r+0x2e>
 8001830:	230c      	movs	r3, #12
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	e0d0      	b.n	80019dc <_svfiprintf_r+0x1d0>
 800183a:	2340      	movs	r3, #64	; 0x40
 800183c:	616b      	str	r3, [r5, #20]
 800183e:	2300      	movs	r3, #0
 8001840:	9309      	str	r3, [sp, #36]	; 0x24
 8001842:	2320      	movs	r3, #32
 8001844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001848:	f8cd 800c 	str.w	r8, [sp, #12]
 800184c:	2330      	movs	r3, #48	; 0x30
 800184e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80019f4 <_svfiprintf_r+0x1e8>
 8001852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001856:	f04f 0901 	mov.w	r9, #1
 800185a:	4623      	mov	r3, r4
 800185c:	469a      	mov	sl, r3
 800185e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001862:	b10a      	cbz	r2, 8001868 <_svfiprintf_r+0x5c>
 8001864:	2a25      	cmp	r2, #37	; 0x25
 8001866:	d1f9      	bne.n	800185c <_svfiprintf_r+0x50>
 8001868:	ebba 0b04 	subs.w	fp, sl, r4
 800186c:	d00b      	beq.n	8001886 <_svfiprintf_r+0x7a>
 800186e:	465b      	mov	r3, fp
 8001870:	4622      	mov	r2, r4
 8001872:	4629      	mov	r1, r5
 8001874:	4638      	mov	r0, r7
 8001876:	f7ff ff6f 	bl	8001758 <__ssputs_r>
 800187a:	3001      	adds	r0, #1
 800187c:	f000 80a9 	beq.w	80019d2 <_svfiprintf_r+0x1c6>
 8001880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001882:	445a      	add	r2, fp
 8001884:	9209      	str	r2, [sp, #36]	; 0x24
 8001886:	f89a 3000 	ldrb.w	r3, [sl]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80a1 	beq.w	80019d2 <_svfiprintf_r+0x1c6>
 8001890:	2300      	movs	r3, #0
 8001892:	f04f 32ff 	mov.w	r2, #4294967295
 8001896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800189a:	f10a 0a01 	add.w	sl, sl, #1
 800189e:	9304      	str	r3, [sp, #16]
 80018a0:	9307      	str	r3, [sp, #28]
 80018a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018a6:	931a      	str	r3, [sp, #104]	; 0x68
 80018a8:	4654      	mov	r4, sl
 80018aa:	2205      	movs	r2, #5
 80018ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018b0:	4850      	ldr	r0, [pc, #320]	; (80019f4 <_svfiprintf_r+0x1e8>)
 80018b2:	f7fe fcad 	bl	8000210 <memchr>
 80018b6:	9a04      	ldr	r2, [sp, #16]
 80018b8:	b9d8      	cbnz	r0, 80018f2 <_svfiprintf_r+0xe6>
 80018ba:	06d0      	lsls	r0, r2, #27
 80018bc:	bf44      	itt	mi
 80018be:	2320      	movmi	r3, #32
 80018c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018c4:	0711      	lsls	r1, r2, #28
 80018c6:	bf44      	itt	mi
 80018c8:	232b      	movmi	r3, #43	; 0x2b
 80018ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018ce:	f89a 3000 	ldrb.w	r3, [sl]
 80018d2:	2b2a      	cmp	r3, #42	; 0x2a
 80018d4:	d015      	beq.n	8001902 <_svfiprintf_r+0xf6>
 80018d6:	9a07      	ldr	r2, [sp, #28]
 80018d8:	4654      	mov	r4, sl
 80018da:	2000      	movs	r0, #0
 80018dc:	f04f 0c0a 	mov.w	ip, #10
 80018e0:	4621      	mov	r1, r4
 80018e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018e6:	3b30      	subs	r3, #48	; 0x30
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d94d      	bls.n	8001988 <_svfiprintf_r+0x17c>
 80018ec:	b1b0      	cbz	r0, 800191c <_svfiprintf_r+0x110>
 80018ee:	9207      	str	r2, [sp, #28]
 80018f0:	e014      	b.n	800191c <_svfiprintf_r+0x110>
 80018f2:	eba0 0308 	sub.w	r3, r0, r8
 80018f6:	fa09 f303 	lsl.w	r3, r9, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	9304      	str	r3, [sp, #16]
 80018fe:	46a2      	mov	sl, r4
 8001900:	e7d2      	b.n	80018a8 <_svfiprintf_r+0x9c>
 8001902:	9b03      	ldr	r3, [sp, #12]
 8001904:	1d19      	adds	r1, r3, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	9103      	str	r1, [sp, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	bfbb      	ittet	lt
 800190e:	425b      	neglt	r3, r3
 8001910:	f042 0202 	orrlt.w	r2, r2, #2
 8001914:	9307      	strge	r3, [sp, #28]
 8001916:	9307      	strlt	r3, [sp, #28]
 8001918:	bfb8      	it	lt
 800191a:	9204      	strlt	r2, [sp, #16]
 800191c:	7823      	ldrb	r3, [r4, #0]
 800191e:	2b2e      	cmp	r3, #46	; 0x2e
 8001920:	d10c      	bne.n	800193c <_svfiprintf_r+0x130>
 8001922:	7863      	ldrb	r3, [r4, #1]
 8001924:	2b2a      	cmp	r3, #42	; 0x2a
 8001926:	d134      	bne.n	8001992 <_svfiprintf_r+0x186>
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	1d1a      	adds	r2, r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	9203      	str	r2, [sp, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	bfb8      	it	lt
 8001934:	f04f 33ff 	movlt.w	r3, #4294967295
 8001938:	3402      	adds	r4, #2
 800193a:	9305      	str	r3, [sp, #20]
 800193c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001a04 <_svfiprintf_r+0x1f8>
 8001940:	7821      	ldrb	r1, [r4, #0]
 8001942:	2203      	movs	r2, #3
 8001944:	4650      	mov	r0, sl
 8001946:	f7fe fc63 	bl	8000210 <memchr>
 800194a:	b138      	cbz	r0, 800195c <_svfiprintf_r+0x150>
 800194c:	9b04      	ldr	r3, [sp, #16]
 800194e:	eba0 000a 	sub.w	r0, r0, sl
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	4082      	lsls	r2, r0
 8001956:	4313      	orrs	r3, r2
 8001958:	3401      	adds	r4, #1
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001960:	4825      	ldr	r0, [pc, #148]	; (80019f8 <_svfiprintf_r+0x1ec>)
 8001962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001966:	2206      	movs	r2, #6
 8001968:	f7fe fc52 	bl	8000210 <memchr>
 800196c:	2800      	cmp	r0, #0
 800196e:	d038      	beq.n	80019e2 <_svfiprintf_r+0x1d6>
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <_svfiprintf_r+0x1f0>)
 8001972:	bb1b      	cbnz	r3, 80019bc <_svfiprintf_r+0x1b0>
 8001974:	9b03      	ldr	r3, [sp, #12]
 8001976:	3307      	adds	r3, #7
 8001978:	f023 0307 	bic.w	r3, r3, #7
 800197c:	3308      	adds	r3, #8
 800197e:	9303      	str	r3, [sp, #12]
 8001980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001982:	4433      	add	r3, r6
 8001984:	9309      	str	r3, [sp, #36]	; 0x24
 8001986:	e768      	b.n	800185a <_svfiprintf_r+0x4e>
 8001988:	fb0c 3202 	mla	r2, ip, r2, r3
 800198c:	460c      	mov	r4, r1
 800198e:	2001      	movs	r0, #1
 8001990:	e7a6      	b.n	80018e0 <_svfiprintf_r+0xd4>
 8001992:	2300      	movs	r3, #0
 8001994:	3401      	adds	r4, #1
 8001996:	9305      	str	r3, [sp, #20]
 8001998:	4619      	mov	r1, r3
 800199a:	f04f 0c0a 	mov.w	ip, #10
 800199e:	4620      	mov	r0, r4
 80019a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019a4:	3a30      	subs	r2, #48	; 0x30
 80019a6:	2a09      	cmp	r2, #9
 80019a8:	d903      	bls.n	80019b2 <_svfiprintf_r+0x1a6>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0c6      	beq.n	800193c <_svfiprintf_r+0x130>
 80019ae:	9105      	str	r1, [sp, #20]
 80019b0:	e7c4      	b.n	800193c <_svfiprintf_r+0x130>
 80019b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80019b6:	4604      	mov	r4, r0
 80019b8:	2301      	movs	r3, #1
 80019ba:	e7f0      	b.n	800199e <_svfiprintf_r+0x192>
 80019bc:	ab03      	add	r3, sp, #12
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	462a      	mov	r2, r5
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <_svfiprintf_r+0x1f4>)
 80019c4:	a904      	add	r1, sp, #16
 80019c6:	4638      	mov	r0, r7
 80019c8:	f3af 8000 	nop.w
 80019cc:	1c42      	adds	r2, r0, #1
 80019ce:	4606      	mov	r6, r0
 80019d0:	d1d6      	bne.n	8001980 <_svfiprintf_r+0x174>
 80019d2:	89ab      	ldrh	r3, [r5, #12]
 80019d4:	065b      	lsls	r3, r3, #25
 80019d6:	f53f af2d 	bmi.w	8001834 <_svfiprintf_r+0x28>
 80019da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019dc:	b01d      	add	sp, #116	; 0x74
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e2:	ab03      	add	r3, sp, #12
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	462a      	mov	r2, r5
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <_svfiprintf_r+0x1f4>)
 80019ea:	a904      	add	r1, sp, #16
 80019ec:	4638      	mov	r0, r7
 80019ee:	f000 f879 	bl	8001ae4 <_printf_i>
 80019f2:	e7eb      	b.n	80019cc <_svfiprintf_r+0x1c0>
 80019f4:	08002b7f 	.word	0x08002b7f
 80019f8:	08002b89 	.word	0x08002b89
 80019fc:	00000000 	.word	0x00000000
 8001a00:	08001759 	.word	0x08001759
 8001a04:	08002b85 	.word	0x08002b85

08001a08 <_printf_common>:
 8001a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a0c:	4616      	mov	r6, r2
 8001a0e:	4699      	mov	r9, r3
 8001a10:	688a      	ldr	r2, [r1, #8]
 8001a12:	690b      	ldr	r3, [r1, #16]
 8001a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	bfb8      	it	lt
 8001a1c:	4613      	movlt	r3, r2
 8001a1e:	6033      	str	r3, [r6, #0]
 8001a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a24:	4607      	mov	r7, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	b10a      	cbz	r2, 8001a2e <_printf_common+0x26>
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	6033      	str	r3, [r6, #0]
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	0699      	lsls	r1, r3, #26
 8001a32:	bf42      	ittt	mi
 8001a34:	6833      	ldrmi	r3, [r6, #0]
 8001a36:	3302      	addmi	r3, #2
 8001a38:	6033      	strmi	r3, [r6, #0]
 8001a3a:	6825      	ldr	r5, [r4, #0]
 8001a3c:	f015 0506 	ands.w	r5, r5, #6
 8001a40:	d106      	bne.n	8001a50 <_printf_common+0x48>
 8001a42:	f104 0a19 	add.w	sl, r4, #25
 8001a46:	68e3      	ldr	r3, [r4, #12]
 8001a48:	6832      	ldr	r2, [r6, #0]
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	42ab      	cmp	r3, r5
 8001a4e:	dc26      	bgt.n	8001a9e <_printf_common+0x96>
 8001a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a54:	1e13      	subs	r3, r2, #0
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	bf18      	it	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	0692      	lsls	r2, r2, #26
 8001a5e:	d42b      	bmi.n	8001ab8 <_printf_common+0xb0>
 8001a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a64:	4649      	mov	r1, r9
 8001a66:	4638      	mov	r0, r7
 8001a68:	47c0      	blx	r8
 8001a6a:	3001      	adds	r0, #1
 8001a6c:	d01e      	beq.n	8001aac <_printf_common+0xa4>
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	6922      	ldr	r2, [r4, #16]
 8001a72:	f003 0306 	and.w	r3, r3, #6
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf02      	ittt	eq
 8001a7a:	68e5      	ldreq	r5, [r4, #12]
 8001a7c:	6833      	ldreq	r3, [r6, #0]
 8001a7e:	1aed      	subeq	r5, r5, r3
 8001a80:	68a3      	ldr	r3, [r4, #8]
 8001a82:	bf0c      	ite	eq
 8001a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a88:	2500      	movne	r5, #0
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	bfc4      	itt	gt
 8001a8e:	1a9b      	subgt	r3, r3, r2
 8001a90:	18ed      	addgt	r5, r5, r3
 8001a92:	2600      	movs	r6, #0
 8001a94:	341a      	adds	r4, #26
 8001a96:	42b5      	cmp	r5, r6
 8001a98:	d11a      	bne.n	8001ad0 <_printf_common+0xc8>
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e008      	b.n	8001ab0 <_printf_common+0xa8>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	4638      	mov	r0, r7
 8001aa6:	47c0      	blx	r8
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d103      	bne.n	8001ab4 <_printf_common+0xac>
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab4:	3501      	adds	r5, #1
 8001ab6:	e7c6      	b.n	8001a46 <_printf_common+0x3e>
 8001ab8:	18e1      	adds	r1, r4, r3
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	2030      	movs	r0, #48	; 0x30
 8001abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ac2:	4422      	add	r2, r4
 8001ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001acc:	3302      	adds	r3, #2
 8001ace:	e7c7      	b.n	8001a60 <_printf_common+0x58>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	47c0      	blx	r8
 8001ada:	3001      	adds	r0, #1
 8001adc:	d0e6      	beq.n	8001aac <_printf_common+0xa4>
 8001ade:	3601      	adds	r6, #1
 8001ae0:	e7d9      	b.n	8001a96 <_printf_common+0x8e>
	...

08001ae4 <_printf_i>:
 8001ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae8:	7e0f      	ldrb	r7, [r1, #24]
 8001aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001aec:	2f78      	cmp	r7, #120	; 0x78
 8001aee:	4691      	mov	r9, r2
 8001af0:	4680      	mov	r8, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	469a      	mov	sl, r3
 8001af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001afa:	d807      	bhi.n	8001b0c <_printf_i+0x28>
 8001afc:	2f62      	cmp	r7, #98	; 0x62
 8001afe:	d80a      	bhi.n	8001b16 <_printf_i+0x32>
 8001b00:	2f00      	cmp	r7, #0
 8001b02:	f000 80d4 	beq.w	8001cae <_printf_i+0x1ca>
 8001b06:	2f58      	cmp	r7, #88	; 0x58
 8001b08:	f000 80c0 	beq.w	8001c8c <_printf_i+0x1a8>
 8001b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b14:	e03a      	b.n	8001b8c <_printf_i+0xa8>
 8001b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b1a:	2b15      	cmp	r3, #21
 8001b1c:	d8f6      	bhi.n	8001b0c <_printf_i+0x28>
 8001b1e:	a101      	add	r1, pc, #4	; (adr r1, 8001b24 <_printf_i+0x40>)
 8001b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b24:	08001b7d 	.word	0x08001b7d
 8001b28:	08001b91 	.word	0x08001b91
 8001b2c:	08001b0d 	.word	0x08001b0d
 8001b30:	08001b0d 	.word	0x08001b0d
 8001b34:	08001b0d 	.word	0x08001b0d
 8001b38:	08001b0d 	.word	0x08001b0d
 8001b3c:	08001b91 	.word	0x08001b91
 8001b40:	08001b0d 	.word	0x08001b0d
 8001b44:	08001b0d 	.word	0x08001b0d
 8001b48:	08001b0d 	.word	0x08001b0d
 8001b4c:	08001b0d 	.word	0x08001b0d
 8001b50:	08001c95 	.word	0x08001c95
 8001b54:	08001bbd 	.word	0x08001bbd
 8001b58:	08001c4f 	.word	0x08001c4f
 8001b5c:	08001b0d 	.word	0x08001b0d
 8001b60:	08001b0d 	.word	0x08001b0d
 8001b64:	08001cb7 	.word	0x08001cb7
 8001b68:	08001b0d 	.word	0x08001b0d
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001b0d 	.word	0x08001b0d
 8001b74:	08001b0d 	.word	0x08001b0d
 8001b78:	08001c57 	.word	0x08001c57
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	1d1a      	adds	r2, r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	602a      	str	r2, [r5, #0]
 8001b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e09f      	b.n	8001cd0 <_printf_i+0x1ec>
 8001b90:	6820      	ldr	r0, [r4, #0]
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	0607      	lsls	r7, r0, #24
 8001b96:	f103 0104 	add.w	r1, r3, #4
 8001b9a:	6029      	str	r1, [r5, #0]
 8001b9c:	d501      	bpl.n	8001ba2 <_printf_i+0xbe>
 8001b9e:	681e      	ldr	r6, [r3, #0]
 8001ba0:	e003      	b.n	8001baa <_printf_i+0xc6>
 8001ba2:	0646      	lsls	r6, r0, #25
 8001ba4:	d5fb      	bpl.n	8001b9e <_printf_i+0xba>
 8001ba6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	da03      	bge.n	8001bb6 <_printf_i+0xd2>
 8001bae:	232d      	movs	r3, #45	; 0x2d
 8001bb0:	4276      	negs	r6, r6
 8001bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bb6:	485a      	ldr	r0, [pc, #360]	; (8001d20 <_printf_i+0x23c>)
 8001bb8:	230a      	movs	r3, #10
 8001bba:	e012      	b.n	8001be2 <_printf_i+0xfe>
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	6820      	ldr	r0, [r4, #0]
 8001bc0:	1d19      	adds	r1, r3, #4
 8001bc2:	6029      	str	r1, [r5, #0]
 8001bc4:	0605      	lsls	r5, r0, #24
 8001bc6:	d501      	bpl.n	8001bcc <_printf_i+0xe8>
 8001bc8:	681e      	ldr	r6, [r3, #0]
 8001bca:	e002      	b.n	8001bd2 <_printf_i+0xee>
 8001bcc:	0641      	lsls	r1, r0, #25
 8001bce:	d5fb      	bpl.n	8001bc8 <_printf_i+0xe4>
 8001bd0:	881e      	ldrh	r6, [r3, #0]
 8001bd2:	4853      	ldr	r0, [pc, #332]	; (8001d20 <_printf_i+0x23c>)
 8001bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2308      	moveq	r3, #8
 8001bda:	230a      	movne	r3, #10
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001be2:	6865      	ldr	r5, [r4, #4]
 8001be4:	60a5      	str	r5, [r4, #8]
 8001be6:	2d00      	cmp	r5, #0
 8001be8:	bfa2      	ittt	ge
 8001bea:	6821      	ldrge	r1, [r4, #0]
 8001bec:	f021 0104 	bicge.w	r1, r1, #4
 8001bf0:	6021      	strge	r1, [r4, #0]
 8001bf2:	b90e      	cbnz	r6, 8001bf8 <_printf_i+0x114>
 8001bf4:	2d00      	cmp	r5, #0
 8001bf6:	d04b      	beq.n	8001c90 <_printf_i+0x1ac>
 8001bf8:	4615      	mov	r5, r2
 8001bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8001bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8001c02:	5dc7      	ldrb	r7, [r0, r7]
 8001c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c08:	4637      	mov	r7, r6
 8001c0a:	42bb      	cmp	r3, r7
 8001c0c:	460e      	mov	r6, r1
 8001c0e:	d9f4      	bls.n	8001bfa <_printf_i+0x116>
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d10b      	bne.n	8001c2c <_printf_i+0x148>
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	07de      	lsls	r6, r3, #31
 8001c18:	d508      	bpl.n	8001c2c <_printf_i+0x148>
 8001c1a:	6923      	ldr	r3, [r4, #16]
 8001c1c:	6861      	ldr	r1, [r4, #4]
 8001c1e:	4299      	cmp	r1, r3
 8001c20:	bfde      	ittt	le
 8001c22:	2330      	movle	r3, #48	; 0x30
 8001c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c2c:	1b52      	subs	r2, r2, r5
 8001c2e:	6122      	str	r2, [r4, #16]
 8001c30:	f8cd a000 	str.w	sl, [sp]
 8001c34:	464b      	mov	r3, r9
 8001c36:	aa03      	add	r2, sp, #12
 8001c38:	4621      	mov	r1, r4
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	f7ff fee4 	bl	8001a08 <_printf_common>
 8001c40:	3001      	adds	r0, #1
 8001c42:	d14a      	bne.n	8001cda <_printf_i+0x1f6>
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	b004      	add	sp, #16
 8001c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	f043 0320 	orr.w	r3, r3, #32
 8001c54:	6023      	str	r3, [r4, #0]
 8001c56:	4833      	ldr	r0, [pc, #204]	; (8001d24 <_printf_i+0x240>)
 8001c58:	2778      	movs	r7, #120	; 0x78
 8001c5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	6829      	ldr	r1, [r5, #0]
 8001c62:	061f      	lsls	r7, r3, #24
 8001c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c68:	d402      	bmi.n	8001c70 <_printf_i+0x18c>
 8001c6a:	065f      	lsls	r7, r3, #25
 8001c6c:	bf48      	it	mi
 8001c6e:	b2b6      	uxthmi	r6, r6
 8001c70:	07df      	lsls	r7, r3, #31
 8001c72:	bf48      	it	mi
 8001c74:	f043 0320 	orrmi.w	r3, r3, #32
 8001c78:	6029      	str	r1, [r5, #0]
 8001c7a:	bf48      	it	mi
 8001c7c:	6023      	strmi	r3, [r4, #0]
 8001c7e:	b91e      	cbnz	r6, 8001c88 <_printf_i+0x1a4>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	f023 0320 	bic.w	r3, r3, #32
 8001c86:	6023      	str	r3, [r4, #0]
 8001c88:	2310      	movs	r3, #16
 8001c8a:	e7a7      	b.n	8001bdc <_printf_i+0xf8>
 8001c8c:	4824      	ldr	r0, [pc, #144]	; (8001d20 <_printf_i+0x23c>)
 8001c8e:	e7e4      	b.n	8001c5a <_printf_i+0x176>
 8001c90:	4615      	mov	r5, r2
 8001c92:	e7bd      	b.n	8001c10 <_printf_i+0x12c>
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	6826      	ldr	r6, [r4, #0]
 8001c98:	6961      	ldr	r1, [r4, #20]
 8001c9a:	1d18      	adds	r0, r3, #4
 8001c9c:	6028      	str	r0, [r5, #0]
 8001c9e:	0635      	lsls	r5, r6, #24
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	d501      	bpl.n	8001ca8 <_printf_i+0x1c4>
 8001ca4:	6019      	str	r1, [r3, #0]
 8001ca6:	e002      	b.n	8001cae <_printf_i+0x1ca>
 8001ca8:	0670      	lsls	r0, r6, #25
 8001caa:	d5fb      	bpl.n	8001ca4 <_printf_i+0x1c0>
 8001cac:	8019      	strh	r1, [r3, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6123      	str	r3, [r4, #16]
 8001cb2:	4615      	mov	r5, r2
 8001cb4:	e7bc      	b.n	8001c30 <_printf_i+0x14c>
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	1d1a      	adds	r2, r3, #4
 8001cba:	602a      	str	r2, [r5, #0]
 8001cbc:	681d      	ldr	r5, [r3, #0]
 8001cbe:	6862      	ldr	r2, [r4, #4]
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f7fe faa4 	bl	8000210 <memchr>
 8001cc8:	b108      	cbz	r0, 8001cce <_printf_i+0x1ea>
 8001cca:	1b40      	subs	r0, r0, r5
 8001ccc:	6060      	str	r0, [r4, #4]
 8001cce:	6863      	ldr	r3, [r4, #4]
 8001cd0:	6123      	str	r3, [r4, #16]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cd8:	e7aa      	b.n	8001c30 <_printf_i+0x14c>
 8001cda:	6923      	ldr	r3, [r4, #16]
 8001cdc:	462a      	mov	r2, r5
 8001cde:	4649      	mov	r1, r9
 8001ce0:	4640      	mov	r0, r8
 8001ce2:	47d0      	blx	sl
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	d0ad      	beq.n	8001c44 <_printf_i+0x160>
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	079b      	lsls	r3, r3, #30
 8001cec:	d413      	bmi.n	8001d16 <_printf_i+0x232>
 8001cee:	68e0      	ldr	r0, [r4, #12]
 8001cf0:	9b03      	ldr	r3, [sp, #12]
 8001cf2:	4298      	cmp	r0, r3
 8001cf4:	bfb8      	it	lt
 8001cf6:	4618      	movlt	r0, r3
 8001cf8:	e7a6      	b.n	8001c48 <_printf_i+0x164>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	4649      	mov	r1, r9
 8001d00:	4640      	mov	r0, r8
 8001d02:	47d0      	blx	sl
 8001d04:	3001      	adds	r0, #1
 8001d06:	d09d      	beq.n	8001c44 <_printf_i+0x160>
 8001d08:	3501      	adds	r5, #1
 8001d0a:	68e3      	ldr	r3, [r4, #12]
 8001d0c:	9903      	ldr	r1, [sp, #12]
 8001d0e:	1a5b      	subs	r3, r3, r1
 8001d10:	42ab      	cmp	r3, r5
 8001d12:	dcf2      	bgt.n	8001cfa <_printf_i+0x216>
 8001d14:	e7eb      	b.n	8001cee <_printf_i+0x20a>
 8001d16:	2500      	movs	r5, #0
 8001d18:	f104 0619 	add.w	r6, r4, #25
 8001d1c:	e7f5      	b.n	8001d0a <_printf_i+0x226>
 8001d1e:	bf00      	nop
 8001d20:	08002b90 	.word	0x08002b90
 8001d24:	08002ba1 	.word	0x08002ba1

08001d28 <memmove>:
 8001d28:	4288      	cmp	r0, r1
 8001d2a:	b510      	push	{r4, lr}
 8001d2c:	eb01 0402 	add.w	r4, r1, r2
 8001d30:	d902      	bls.n	8001d38 <memmove+0x10>
 8001d32:	4284      	cmp	r4, r0
 8001d34:	4623      	mov	r3, r4
 8001d36:	d807      	bhi.n	8001d48 <memmove+0x20>
 8001d38:	1e43      	subs	r3, r0, #1
 8001d3a:	42a1      	cmp	r1, r4
 8001d3c:	d008      	beq.n	8001d50 <memmove+0x28>
 8001d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001d46:	e7f8      	b.n	8001d3a <memmove+0x12>
 8001d48:	4402      	add	r2, r0
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	428a      	cmp	r2, r1
 8001d4e:	d100      	bne.n	8001d52 <memmove+0x2a>
 8001d50:	bd10      	pop	{r4, pc}
 8001d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d5a:	e7f7      	b.n	8001d4c <memmove+0x24>

08001d5c <_sbrk_r>:
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	4d06      	ldr	r5, [pc, #24]	; (8001d78 <_sbrk_r+0x1c>)
 8001d60:	2300      	movs	r3, #0
 8001d62:	4604      	mov	r4, r0
 8001d64:	4608      	mov	r0, r1
 8001d66:	602b      	str	r3, [r5, #0]
 8001d68:	f7ff fb4a 	bl	8001400 <_sbrk>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d102      	bne.n	8001d76 <_sbrk_r+0x1a>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	b103      	cbz	r3, 8001d76 <_sbrk_r+0x1a>
 8001d74:	6023      	str	r3, [r4, #0]
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
 8001d78:	200009e8 	.word	0x200009e8

08001d7c <memcpy>:
 8001d7c:	440a      	add	r2, r1
 8001d7e:	4291      	cmp	r1, r2
 8001d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d84:	d100      	bne.n	8001d88 <memcpy+0xc>
 8001d86:	4770      	bx	lr
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d92:	4291      	cmp	r1, r2
 8001d94:	d1f9      	bne.n	8001d8a <memcpy+0xe>
 8001d96:	bd10      	pop	{r4, pc}

08001d98 <_realloc_r>:
 8001d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9c:	4680      	mov	r8, r0
 8001d9e:	4614      	mov	r4, r2
 8001da0:	460e      	mov	r6, r1
 8001da2:	b921      	cbnz	r1, 8001dae <_realloc_r+0x16>
 8001da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	4611      	mov	r1, r2
 8001daa:	f7ff bc49 	b.w	8001640 <_malloc_r>
 8001dae:	b92a      	cbnz	r2, 8001dbc <_realloc_r+0x24>
 8001db0:	f7ff fbda 	bl	8001568 <_free_r>
 8001db4:	4625      	mov	r5, r4
 8001db6:	4628      	mov	r0, r5
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dbc:	f000 f81b 	bl	8001df6 <_malloc_usable_size_r>
 8001dc0:	4284      	cmp	r4, r0
 8001dc2:	4607      	mov	r7, r0
 8001dc4:	d802      	bhi.n	8001dcc <_realloc_r+0x34>
 8001dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001dca:	d812      	bhi.n	8001df2 <_realloc_r+0x5a>
 8001dcc:	4621      	mov	r1, r4
 8001dce:	4640      	mov	r0, r8
 8001dd0:	f7ff fc36 	bl	8001640 <_malloc_r>
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d0ed      	beq.n	8001db6 <_realloc_r+0x1e>
 8001dda:	42bc      	cmp	r4, r7
 8001ddc:	4622      	mov	r2, r4
 8001dde:	4631      	mov	r1, r6
 8001de0:	bf28      	it	cs
 8001de2:	463a      	movcs	r2, r7
 8001de4:	f7ff ffca 	bl	8001d7c <memcpy>
 8001de8:	4631      	mov	r1, r6
 8001dea:	4640      	mov	r0, r8
 8001dec:	f7ff fbbc 	bl	8001568 <_free_r>
 8001df0:	e7e1      	b.n	8001db6 <_realloc_r+0x1e>
 8001df2:	4635      	mov	r5, r6
 8001df4:	e7df      	b.n	8001db6 <_realloc_r+0x1e>

08001df6 <_malloc_usable_size_r>:
 8001df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dfa:	1f18      	subs	r0, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bfbc      	itt	lt
 8001e00:	580b      	ldrlt	r3, [r1, r0]
 8001e02:	18c0      	addlt	r0, r0, r3
 8001e04:	4770      	bx	lr
	...

08001e08 <_init>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr

08001e14 <_fini>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr
