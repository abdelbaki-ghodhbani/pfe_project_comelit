
uart_pc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08001998  08001998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b28  08001b28  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08001b28  08001b28  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b28  08001b28  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b28  08001b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b2c  08001b2c  00011b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08001b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  20000054  08001b84  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f0  08001b84  000209f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001403  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000716  00000000  00000000  000214ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012d  00000000  00000000  00021d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f1fd  00000000  00000000  00021eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002899  00000000  00000000  000310b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005380d  00000000  00000000  0003394b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a54  00000000  00000000  00087158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00087bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001980 	.word	0x08001980

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001980 	.word	0x08001980

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <circular_buffer_init>:
circular_buffer *_rx_buffer2;
circular_buffer *_tx_buffer2;


void circular_buffer_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/*Initial buffers*/
	_rx_buffer1 = &rx_buffer1;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <circular_buffer_init+0x40>)
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <circular_buffer_init+0x44>)
 8000298:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <circular_buffer_init+0x48>)
 800029c:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <circular_buffer_init+0x4c>)
 800029e:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <circular_buffer_init+0x50>)
 80002a2:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <circular_buffer_init+0x54>)
 80002a4:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <circular_buffer_init+0x58>)
 80002a8:	4a10      	ldr	r2, [pc, #64]	; (80002ec <circular_buffer_init+0x5c>)
 80002aa:	601a      	str	r2, [r3, #0]

	/*Initial UART interrupts*/
	USART1->CR1 |=CR1_RXNEIE;  				/*esp_uart*/
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <circular_buffer_init+0x60>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <circular_buffer_init+0x60>)
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=CR1_RXNEIE;  				/*debug_uart*/
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <circular_buffer_init+0x64>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <circular_buffer_init+0x64>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	60d3      	str	r3, [r2, #12]


}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000894 	.word	0x20000894
 80002d4:	20000074 	.word	0x20000074
 80002d8:	20000898 	.word	0x20000898
 80002dc:	2000027c 	.word	0x2000027c
 80002e0:	2000089c 	.word	0x2000089c
 80002e4:	20000484 	.word	0x20000484
 80002e8:	200008a0 	.word	0x200008a0
 80002ec:	2000068c 	.word	0x2000068c
 80002f0:	40011000 	.word	0x40011000
 80002f4:	40004400 	.word	0x40004400

080002f8 <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
	 int loc =  (uint32_t)(buffer->head +1)% UART_BUFFER_SIZE;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800030a:	3301      	adds	r3, #1
 800030c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000310:	60fb      	str	r3, [r7, #12]

	/*Check if no overflow will occur*/

	 if(loc != buffer->tail){
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	429a      	cmp	r2, r3
 800031c:	d009      	beq.n	8000332 <buff_store_char+0x3a>
		 /*Store character*/
		 buffer->buffer[buffer->head]  = c ;
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	79f9      	ldrb	r1, [r7, #7]
 8000328:	54d1      	strb	r1, [r2, r3]
		 /*Update head*/
		 buffer->head = loc;
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	 }
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <buffer_clear>:

}


void buffer_clear(portType uart)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <buffer_clear+0x5c>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	429a      	cmp	r2, r3
 8000352:	d10c      	bne.n	800036e <buffer_clear+0x2e>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer1->buffer,'\0',UART_BUFFER_SIZE);
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <buffer_clear+0x60>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fe8a 	bl	8001078 <memset>
		_rx_buffer1->head = 0 ;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <buffer_clear+0x60>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2200      	movs	r2, #0
 800036a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	if(uart == debug_port )
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <buffer_clear+0x64>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	79fa      	ldrb	r2, [r7, #7]
 8000374:	429a      	cmp	r2, r3
 8000376:	d10c      	bne.n	8000392 <buffer_clear+0x52>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer2->buffer,'\0',UART_BUFFER_SIZE);
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <buffer_clear+0x68>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fe78 	bl	8001078 <memset>
		_rx_buffer2->head = 0 ;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <buffer_clear+0x68>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2200      	movs	r2, #0
 800038e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000894 	.word	0x20000894
 80003a4:	20000070 	.word	0x20000070
 80003a8:	2000089c 	.word	0x2000089c

080003ac <buffer_peek>:


int32_t buffer_peek(portType uart)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <buffer_peek+0x84>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	79fa      	ldrb	r2, [r7, #7]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d114      	bne.n	80003ea <buffer_peek+0x3e>
	{
	   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <buffer_peek+0x88>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <buffer_peek+0x88>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d102      	bne.n	80003da <buffer_peek+0x2e>
	   {
		   return -1;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	e023      	b.n	8000422 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer1->buffer[_rx_buffer1->tail];
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <buffer_peek+0x88>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <buffer_peek+0x88>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	e01b      	b.n	8000422 <buffer_peek+0x76>
	   }
	}

	else if(uart == debug_port )
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <buffer_peek+0x8c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	79fa      	ldrb	r2, [r7, #7]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d114      	bne.n	800041e <buffer_peek+0x72>
	{
	   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <buffer_peek+0x90>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <buffer_peek+0x90>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000404:	429a      	cmp	r2, r3
 8000406:	d102      	bne.n	800040e <buffer_peek+0x62>
	   {
		   return -1;
 8000408:	f04f 33ff 	mov.w	r3, #4294967295
 800040c:	e009      	b.n	8000422 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer2->buffer[_rx_buffer2->tail];
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <buffer_peek+0x90>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <buffer_peek+0x90>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800041a:	5cd3      	ldrb	r3, [r2, r3]
 800041c:	e001      	b.n	8000422 <buffer_peek+0x76>
	   }
	}

	else
	{
		 return -1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000
 8000434:	20000894 	.word	0x20000894
 8000438:	20000070 	.word	0x20000070
 800043c:	2000089c 	.word	0x2000089c

08000440 <buffer_read>:
int32_t buffer_read(portType uart)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 800044a:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <buffer_read+0xb8>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	79fa      	ldrb	r2, [r7, #7]
 8000450:	429a      	cmp	r2, r3
 8000452:	d121      	bne.n	8000498 <buffer_read+0x58>
	{
		   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <buffer_read+0xbc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <buffer_read+0xbc>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000464:	429a      	cmp	r2, r3
 8000466:	d102      	bne.n	800046e <buffer_read+0x2e>
			   {
				   return -1;
 8000468:	f04f 33ff 	mov.w	r3, #4294967295
 800046c:	e03d      	b.n	80004ea <buffer_read+0xaa>
			   }
		   else
		   {
			  unsigned char c =  _rx_buffer1->buffer[_rx_buffer1->tail];
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <buffer_read+0xbc>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <buffer_read+0xbc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800047a:	5cd3      	ldrb	r3, [r2, r3]
 800047c:	73bb      	strb	r3, [r7, #14]
			  _rx_buffer1->tail =  (uint32_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 800047e:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <buffer_read+0xbc>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <buffer_read+0xbc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			  return c;
 8000494:	7bbb      	ldrb	r3, [r7, #14]
 8000496:	e028      	b.n	80004ea <buffer_read+0xaa>
		   }
	}

	else if(uart == debug_port )
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <buffer_read+0xc0>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	79fa      	ldrb	r2, [r7, #7]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d121      	bne.n	80004e6 <buffer_read+0xa6>
	{
		   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <buffer_read+0xc4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <buffer_read+0xc4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d102      	bne.n	80004bc <buffer_read+0x7c>
			 {
				   return -1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ba:	e016      	b.n	80004ea <buffer_read+0xaa>
			 }
		   else
		   {
				  unsigned char c =  _rx_buffer2->buffer[_rx_buffer2->tail];
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <buffer_read+0xc4>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <buffer_read+0xc4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004c8:	5cd3      	ldrb	r3, [r2, r3]
 80004ca:	73fb      	strb	r3, [r7, #15]
				  _rx_buffer2->tail =  (uint32_t)(_rx_buffer2->tail +1)%UART_BUFFER_SIZE;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <buffer_read+0xc4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <buffer_read+0xc4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
				  return c;
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	e001      	b.n	80004ea <buffer_read+0xaa>
		   }
	}

	else
	{
		 return -1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000894 	.word	0x20000894
 8000500:	20000070 	.word	0x20000070
 8000504:	2000089c 	.word	0x2000089c

08000508 <buffer_write>:

void buffer_write(unsigned char c, portType uart )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
	if(uart == esp82xx_port )
 8000518:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <buffer_write+0xbc>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	429a      	cmp	r2, r3
 8000520:	d122      	bne.n	8000568 <buffer_write+0x60>
	{
		int loc =  (_tx_buffer1->head +1)%UART_BUFFER_SIZE;
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <buffer_write+0xc0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800052a:	3301      	adds	r3, #1
 800052c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000530:	60fb      	str	r3, [r7, #12]

		while(loc == _tx_buffer1->tail ){}
 8000532:	bf00      	nop
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <buffer_write+0xc0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	429a      	cmp	r2, r3
 8000540:	d0f8      	beq.n	8000534 <buffer_write+0x2c>

		_tx_buffer1->buffer[_tx_buffer1->head]=  c;
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <buffer_write+0xc0>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <buffer_write+0xc0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800054e:	79f9      	ldrb	r1, [r7, #7]
 8000550:	54d1      	strb	r1, [r2, r3]

		_tx_buffer1->head =  loc;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <buffer_write+0xc0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART1->CR1 |= CR1_TXEIE;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <buffer_write+0xc4>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <buffer_write+0xc4>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	60d3      	str	r3, [r2, #12]

	}

	if(uart == debug_port)
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <buffer_write+0xc8>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	429a      	cmp	r2, r3
 8000570:	d122      	bne.n	80005b8 <buffer_write+0xb0>
	{
		int loc =  (_tx_buffer2->head +1)%UART_BUFFER_SIZE;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <buffer_write+0xcc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800057a:	3301      	adds	r3, #1
 800057c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000580:	60bb      	str	r3, [r7, #8]

		while(loc == _tx_buffer2->tail ){}
 8000582:	bf00      	nop
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <buffer_write+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	429a      	cmp	r2, r3
 8000590:	d0f8      	beq.n	8000584 <buffer_write+0x7c>

		_tx_buffer2->buffer[_tx_buffer2->head]=  c;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <buffer_write+0xcc>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <buffer_write+0xcc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800059e:	79f9      	ldrb	r1, [r7, #7]
 80005a0:	54d1      	strb	r1, [r2, r3]

		_tx_buffer2->head =  loc;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <buffer_write+0xcc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART2->CR1 |= CR1_TXEIE;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <buffer_write+0xd0>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <buffer_write+0xd0>)
 80005b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b6:	60d3      	str	r3, [r2, #12]

	  }
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000898 	.word	0x20000898
 80005cc:	40011000 	.word	0x40011000
 80005d0:	20000070 	.word	0x20000070
 80005d4:	200008a0 	.word	0x200008a0
 80005d8:	40004400 	.word	0x40004400

080005dc <is_data>:


int32_t is_data(portType uart)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if(uart ==  esp82xx_port)
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <is_data+0x78>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d111      	bne.n	8000614 <is_data+0x38>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <is_data+0x7c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <is_data+0x7c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000602:	b29b      	uxth	r3, r3
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800060c:	b29b      	uxth	r3, r3
 800060e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000612:	e018      	b.n	8000646 <is_data+0x6a>
	}
	else if(uart ==  debug_port)
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <is_data+0x80>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	429a      	cmp	r2, r3
 800061c:	d111      	bne.n	8000642 <is_data+0x66>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <is_data+0x84>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <is_data+0x84>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000630:	b29b      	uxth	r3, r3
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800063a:	b29b      	uxth	r3, r3
 800063c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000640:	e001      	b.n	8000646 <is_data+0x6a>

	}
	else
	{
		return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	20000894 	.word	0x20000894
 800065c:	20000070 	.word	0x20000070
 8000660:	2000089c 	.word	0x2000089c

08000664 <get_first_char>:
/*Function to find the position of the first character of a string in the
 * the buffer*/


static void get_first_char(char *str)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/*Make sure there is data in the buffer*/
	while(!is_data(esp82xx_port)){}
 800066c:	bf00      	nop
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <get_first_char+0x68>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffb2 	bl	80005dc <is_data>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f7      	beq.n	800066e <get_first_char+0xa>

	while(buffer_peek(esp82xx_port)!= str[0]){
 800067e:	e016      	b.n	80006ae <get_first_char+0x4a>

		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <get_first_char+0x6c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000688:	b29b      	uxth	r3, r3
 800068a:	3301      	adds	r3, #1
 800068c:	b29b      	uxth	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <get_first_char+0x6c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000698:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		while(!is_data(esp82xx_port)){}
 800069c:	bf00      	nop
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <get_first_char+0x68>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff9a 	bl	80005dc <is_data>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f7      	beq.n	800069e <get_first_char+0x3a>
	while(buffer_peek(esp82xx_port)!= str[0]){
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <get_first_char+0x68>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fe7a 	bl	80003ac <buffer_peek>
 80006b8:	4602      	mov	r2, r0
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d1de      	bne.n	8000680 <get_first_char+0x1c>

	}
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000894 	.word	0x20000894

080006d4 <is_response>:


int8_t is_response(char *str)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	int curr_pos = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
	int len = strlen(str);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fd7d 	bl	80001e0 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	60bb      	str	r3, [r7, #8]

	while( curr_pos != len)
 80006ea:	e028      	b.n	800073e <is_response+0x6a>
	{
		curr_pos  = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
		get_first_char(str);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffb7 	bl	8000664 <get_first_char>

		while(buffer_peek(esp82xx_port) == str[curr_pos])
 80006f6:	e016      	b.n	8000726 <is_response+0x52>
		{
			curr_pos++;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]

			buffer_read(esp82xx_port);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <is_response+0x8c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe9c 	bl	8000440 <buffer_read>

			if(curr_pos ==  len)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	429a      	cmp	r2, r3
 800070e:	d101      	bne.n	8000714 <is_response+0x40>
			{
				/*success*/
				return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e020      	b.n	8000756 <is_response+0x82>
			}

			while(!is_data(esp82xx_port)){}
 8000714:	bf00      	nop
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <is_response+0x8c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff5e 	bl	80005dc <is_data>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f7      	beq.n	8000716 <is_response+0x42>
		while(buffer_peek(esp82xx_port) == str[curr_pos])
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <is_response+0x8c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe3e 	bl	80003ac <buffer_peek>
 8000730:	4601      	mov	r1, r0
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4299      	cmp	r1, r3
 800073c:	d0dc      	beq.n	80006f8 <is_response+0x24>
	while( curr_pos != len)
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d1d2      	bne.n	80006ec <is_response+0x18>

		}

	}

	if(curr_pos  == len)
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	429a      	cmp	r2, r3
 800074c:	d101      	bne.n	8000752 <is_response+0x7e>
	{
		/*success*/
	   return 1;
 800074e:	2301      	movs	r3, #1
 8000750:	e001      	b.n	8000756 <is_response+0x82>
	}
	else
	{
	   return -1;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000

08000764 <buffer_send_string>:
}



void buffer_send_string(const char *s, portType uart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	while(*s != '\0')
 8000770:	e008      	b.n	8000784 <buffer_send_string+0x20>
	{
		buffer_write(*s++,uart);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fec2 	bl	8000508 <buffer_write>
	while(*s != '\0')
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f2      	bne.n	8000772 <buffer_send_string+0xe>
	}
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <process_copy>:

static int8_t process_copy(char * str, char * dest_buffer, int start_pos)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
	int curr_pos = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
	int len =  strlen(str);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fd19 	bl	80001e0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	617b      	str	r3, [r7, #20]
	int indx = start_pos;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	61bb      	str	r3, [r7, #24]

	while(!is_data(esp82xx_port)){}
 80007b6:	bf00      	nop
 80007b8:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <process_copy+0x11c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff0d 	bl	80005dc <is_data>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f7      	beq.n	80007b8 <process_copy+0x20>

	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 80007c8:	e024      	b.n	8000814 <process_copy+0x7c>
	{
		dest_buffer[indx] =  _rx_buffer1->buffer[_rx_buffer1->tail];
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <process_copy+0x120>)
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <process_copy+0x120>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	68b8      	ldr	r0, [r7, #8]
 80007da:	4403      	add	r3, r0
 80007dc:	5c8a      	ldrb	r2, [r1, r2]
 80007de:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <process_copy+0x120>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	3301      	adds	r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <process_copy+0x120>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	3301      	adds	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]

		while(!is_data(esp82xx_port)){}
 8000802:	bf00      	nop
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <process_copy+0x11c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee7 	bl	80005dc <is_data>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f7      	beq.n	8000804 <process_copy+0x6c>
	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <process_copy+0x11c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fdc7 	bl	80003ac <buffer_peek>
 800081e:	4601      	mov	r1, r0
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4299      	cmp	r1, r3
 800082a:	d1ce      	bne.n	80007ca <process_copy+0x32>


	}

	while(buffer_peek(esp82xx_port) == str[curr_pos])
 800082c:	e01f      	b.n	800086e <process_copy+0xd6>
	{
		curr_pos++;
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3301      	adds	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
		dest_buffer[indx++] = buffer_read(esp82xx_port);
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <process_copy+0x11c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe01 	bl	8000440 <buffer_read>
 800083e:	4601      	mov	r1, r0
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	61ba      	str	r2, [r7, #24]
 8000846:	461a      	mov	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	b2ca      	uxtb	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]

		if(curr_pos == len){
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	429a      	cmp	r2, r3
 8000856:	d101      	bne.n	800085c <process_copy+0xc4>

			return 1;
 8000858:	2301      	movs	r3, #1
 800085a:	e027      	b.n	80008ac <process_copy+0x114>
		}

		while(!is_data(esp82xx_port)){}
 800085c:	bf00      	nop
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <process_copy+0x11c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff feba 	bl	80005dc <is_data>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f7      	beq.n	800085e <process_copy+0xc6>
	while(buffer_peek(esp82xx_port) == str[curr_pos])
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <process_copy+0x11c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd9a 	bl	80003ac <buffer_peek>
 8000878:	4601      	mov	r1, r0
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4299      	cmp	r1, r3
 8000884:	d0d3      	beq.n	800082e <process_copy+0x96>

	}

	if(curr_pos != len)
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	429a      	cmp	r2, r3
 800088c:	d006      	beq.n	800089c <process_copy+0x104>
	{
		curr_pos = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]

		process_copy(str, dest_buffer, indx);
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff ff7e 	bl	8000798 <process_copy>

	}

	if(curr_pos  ==  len)
 800089c:	69fa      	ldr	r2, [r7, #28]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d101      	bne.n	80008a8 <process_copy+0x110>
	{
		return 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e001      	b.n	80008ac <process_copy+0x114>
	}
	else
	{
		return -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
	}



}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000894 	.word	0x20000894

080008bc <copy_up_to_string>:
int8_t copy_up_to_string(char * str, char * dest_buffer)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	/*Process copy*/
	return (process_copy(str,dest_buffer, 0));
 80008c6:	2200      	movs	r2, #0
 80008c8:	6839      	ldr	r1, [r7, #0]
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff64 	bl	8000798 <process_copy>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <esp82_uart_callback>:

void esp82_uart_callback(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART1->SR & SR_RXNE) != 0) && ((USART1->CR1 & CR1_RXNEIE) != 0))
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <esp82_uart_callback+0x94>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00f      	beq.n	800090e <esp82_uart_callback+0x32>
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <esp82_uart_callback+0x94>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <esp82_uart_callback+0x32>
	{
		unsigned char c = USART1->DR;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <esp82_uart_callback+0x94>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer1);
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <esp82_uart_callback+0x98>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fcf5 	bl	80002f8 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART1->SR & SR_TXE) != 0) && ((USART1->CR1 & CR1_TXEIE) != 0))
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <esp82_uart_callback+0x94>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	2b00      	cmp	r3, #0
 8000918:	d026      	beq.n	8000968 <esp82_uart_callback+0x8c>
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <esp82_uart_callback+0x94>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	2b00      	cmp	r3, #0
 8000924:	d020      	beq.n	8000968 <esp82_uart_callback+0x8c>
	{
		if(tx_buffer1.head  == tx_buffer1.tail)
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <esp82_uart_callback+0x9c>)
 8000928:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <esp82_uart_callback+0x9c>)
 800092e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000932:	429a      	cmp	r2, r3
 8000934:	d106      	bne.n	8000944 <esp82_uart_callback+0x68>
		{
			USART1->CR1 &=~CR1_TXEIE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <esp82_uart_callback+0x94>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <esp82_uart_callback+0x94>)
 800093c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000940:	60d3      	str	r3, [r2, #12]
			USART1->DR = c;

		}
	}

}
 8000942:	e011      	b.n	8000968 <esp82_uart_callback+0x8c>
			unsigned char c  = tx_buffer1.buffer[tx_buffer1.tail];
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <esp82_uart_callback+0x9c>)
 8000946:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <esp82_uart_callback+0x9c>)
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	71bb      	strb	r3, [r7, #6]
			tx_buffer1.tail =  (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <esp82_uart_callback+0x9c>)
 8000952:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000956:	3301      	adds	r3, #1
 8000958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <esp82_uart_callback+0x9c>)
 800095e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART1->DR = c;
 8000962:	4a03      	ldr	r2, [pc, #12]	; (8000970 <esp82_uart_callback+0x94>)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	6053      	str	r3, [r2, #4]
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40011000 	.word	0x40011000
 8000974:	20000894 	.word	0x20000894
 8000978:	2000027c 	.word	0x2000027c

0800097c <debug_uart_callback>:

void debug_uart_callback(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART2->SR & SR_RXNE) != 0) && ((USART2->CR1 & CR1_RXNEIE) != 0))
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <debug_uart_callback+0x94>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00f      	beq.n	80009ae <debug_uart_callback+0x32>
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <debug_uart_callback+0x94>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	2b00      	cmp	r3, #0
 8000998:	d009      	beq.n	80009ae <debug_uart_callback+0x32>
	{
		unsigned char c = USART2->DR;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <debug_uart_callback+0x94>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer2);
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <debug_uart_callback+0x98>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fca5 	bl	80002f8 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART2->SR & SR_TXE) != 0) && ((USART2->CR1 & CR1_TXEIE) != 0))
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <debug_uart_callback+0x94>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d026      	beq.n	8000a08 <debug_uart_callback+0x8c>
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <debug_uart_callback+0x94>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d020      	beq.n	8000a08 <debug_uart_callback+0x8c>
	{
		if(tx_buffer2.head  == tx_buffer2.tail)
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <debug_uart_callback+0x9c>)
 80009c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <debug_uart_callback+0x9c>)
 80009ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d106      	bne.n	80009e4 <debug_uart_callback+0x68>
		{
			USART2->CR1 &=~CR1_TXEIE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <debug_uart_callback+0x94>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <debug_uart_callback+0x94>)
 80009dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009e0:	60d3      	str	r3, [r2, #12]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
			USART2->DR = c;

		}
	}
}
 80009e2:	e011      	b.n	8000a08 <debug_uart_callback+0x8c>
			unsigned char c  = tx_buffer2.buffer[tx_buffer2.tail];
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <debug_uart_callback+0x9c>)
 80009e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <debug_uart_callback+0x9c>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	71bb      	strb	r3, [r7, #6]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <debug_uart_callback+0x9c>)
 80009f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009f6:	3301      	adds	r3, #1
 80009f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <debug_uart_callback+0x9c>)
 80009fe:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART2->DR = c;
 8000a02:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <debug_uart_callback+0x94>)
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	6053      	str	r3, [r2, #4]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004400 	.word	0x40004400
 8000a14:	2000089c 	.word	0x2000089c
 8000a18:	2000068c 	.word	0x2000068c

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <debug_uart_init>:
	debug_uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <debug_uart_init+0xe8>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a37      	ldr	r2, [pc, #220]	; (8000b40 <debug_uart_init+0xe8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000a68:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <debug_uart_init+0xec>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <debug_uart_init+0xec>)
 8000a6e:	f023 0310 	bic.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <debug_uart_init+0xec>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <debug_uart_init+0xec>)
 8000a7a:	f043 0320 	orr.w	r3, r3, #32
 8000a7e:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <debug_uart_init+0xec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <debug_uart_init+0xec>)
 8000a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <debug_uart_init+0xec>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <debug_uart_init+0xec>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <debug_uart_init+0xec>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <debug_uart_init+0xec>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <debug_uart_init+0xec>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <debug_uart_init+0xec>)
 8000aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <debug_uart_init+0xec>)
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <debug_uart_init+0xec>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <debug_uart_init+0xec>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <debug_uart_init+0xec>)
 8000ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ac6:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <debug_uart_init+0xec>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <debug_uart_init+0xec>)
 8000ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <debug_uart_init+0xec>)
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <debug_uart_init+0xec>)
 8000ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ade:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <debug_uart_init+0xec>)
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <debug_uart_init+0xec>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <debug_uart_init+0xec>)
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <debug_uart_init+0xec>)
 8000af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000af6:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <debug_uart_init+0xe8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <debug_uart_init+0xe8>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <debug_uart_init+0xf0>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <debug_uart_init+0xf0>)
 8000b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b0e:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000b10:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <debug_uart_init+0xf4>)
 8000b16:	f000 f8c1 	bl	8000c9c <compute_uart_bd>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <debug_uart_init+0xf0>)
 8000b20:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <debug_uart_init+0xf0>)
 8000b24:	220c      	movs	r2, #12
 8000b26:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 8000b28:	2026      	movs	r0, #38	; 0x26
 8000b2a:	f7ff ff77 	bl	8000a1c <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <debug_uart_init+0xf0>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <debug_uart_init+0xf0>)
 8000b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b38:	60d3      	str	r3, [r2, #12]


}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	00f42400 	.word	0x00f42400

08000b50 <esp_uart_init>:




void esp_uart_init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <esp_uart_init+0xe8>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a37      	ldr	r2, [pc, #220]	; (8000c38 <esp_uart_init+0xe8>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 and PA10 modes to alternate function*/

	/*PA9*/
	GPIOA->MODER &=~(1U<<18);
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <esp_uart_init+0xec>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <esp_uart_init+0xec>)
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <esp_uart_init+0xec>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <esp_uart_init+0xec>)
 8000b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b76:	6013      	str	r3, [r2, #0]

    /*PA10*/
	GPIOA->MODER &=~(1U<<20);
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <esp_uart_init+0xec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <esp_uart_init+0xec>)
 8000b7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b82:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <esp_uart_init+0xec>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <esp_uart_init+0xec>)
 8000b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8e:	6013      	str	r3, [r2, #0]

    /*Set alternate function type to UART1 AF07*/

	/*PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <esp_uart_init+0xec>)
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <esp_uart_init+0xec>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <esp_uart_init+0xec>)
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <esp_uart_init+0xec>)
 8000ba2:	f043 0320 	orr.w	r3, r3, #32
 8000ba6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <esp_uart_init+0xec>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <esp_uart_init+0xec>)
 8000bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <esp_uart_init+0xec>)
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <esp_uart_init+0xec>)
 8000bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bbe:	6253      	str	r3, [r2, #36]	; 0x24

	/*PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <esp_uart_init+0xec>)
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <esp_uart_init+0xec>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <esp_uart_init+0xec>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <esp_uart_init+0xec>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <esp_uart_init+0xec>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <esp_uart_init+0xec>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <esp_uart_init+0xec>)
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <esp_uart_init+0xec>)
 8000bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bee:	6253      	str	r3, [r2, #36]	; 0x24

	/************Configure UART module*****************/

	/*Enable clock access to UART1*/
	RCC->APB2ENR |= UART1EN;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <esp_uart_init+0xe8>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <esp_uart_init+0xe8>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6453      	str	r3, [r2, #68]	; 0x44

	/*Disable UART module*/
	USART1->CR1 &=~CR1_UE;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <esp_uart_init+0xf0>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <esp_uart_init+0xf0>)
 8000c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c06:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART1->BRR =  compute_uart_bd(APB2_CLK,UART_BAUDRATE);
 8000c08:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <esp_uart_init+0xf4>)
 8000c0e:	f000 f845 	bl	8000c9c <compute_uart_bd>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <esp_uart_init+0xf0>)
 8000c18:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <esp_uart_init+0xf0>)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART1_IRQn);
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f7ff fefb 	bl	8000a1c <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART1->CR1 |=CR1_UE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <esp_uart_init+0xf0>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <esp_uart_init+0xf0>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c30:	60d3      	str	r3, [r2, #12]



}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40011000 	.word	0x40011000
 8000c44:	00f42400 	.word	0x00f42400

08000c48 <systick_delay_ms>:
	USART2->DR  =  (ch & 0xFF);
}


void systick_delay_ms(uint32_t delay)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <systick_delay_ms+0x50>)
 8000c52:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c56:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <systick_delay_ms+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_CLKSRC |CTRL_ENABLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <systick_delay_ms+0x50>)
 8000c60:	2205      	movs	r2, #5
 8000c62:	601a      	str	r2, [r3, #0]

	for(int i = 0; i< delay ;i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e009      	b.n	8000c7e <systick_delay_ms+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG)== 0){}
 8000c6a:	bf00      	nop
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <systick_delay_ms+0x50>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f9      	beq.n	8000c6c <systick_delay_ms+0x24>
	for(int i = 0; i< delay ;i++)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d8f1      	bhi.n	8000c6a <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <systick_delay_ms+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]


}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	085a      	lsrs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	441a      	add	r2, r3
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb4:	b29b      	uxth	r3, r3
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <esp82xx_reset>:


/*Reset esp82xx*/

 void esp82xx_reset(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	/*Send reset command*/
	buffer_send_string("AT+RST\r\n",esp82xx_port);
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <esp82xx_reset+0x38>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <esp82xx_reset+0x3c>)
 8000cd0:	f7ff fd48 	bl	8000764 <buffer_send_string>

	/*Delay for 1 second*/
	systick_delay_ms(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f7ff ffb6 	bl	8000c48 <systick_delay_ms>

	/*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000cdc:	bf00      	nop
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <esp82xx_reset+0x40>)
 8000ce0:	f7ff fcf8 	bl	80006d4 <is_response>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f9      	beq.n	8000cde <esp82xx_reset+0x1a>

	buffer_send_string("Reset was successful...\n\r",debug_port);
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <esp82xx_reset+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <esp82xx_reset+0x48>)
 8000cf2:	f7ff fd37 	bl	8000764 <buffer_send_string>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	08001998 	.word	0x08001998
 8000d04:	080019a4 	.word	0x080019a4
 8000d08:	20000070 	.word	0x20000070
 8000d0c:	080019ac 	.word	0x080019ac

08000d10 <esp82xx_startup_test>:

 /*Test AT startup*/
 void esp82xx_startup_test(void)
 {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <esp82xx_startup_test+0x38>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb11 	bl	8000340 <buffer_clear>

	 /*Send test command*/
	buffer_send_string("AT\r\n",esp82xx_port);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <esp82xx_startup_test+0x38>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <esp82xx_startup_test+0x3c>)
 8000d26:	f7ff fd1d 	bl	8000764 <buffer_send_string>



     /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000d2a:	bf00      	nop
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <esp82xx_startup_test+0x40>)
 8000d2e:	f7ff fcd1 	bl	80006d4 <is_response>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f9      	beq.n	8000d2c <esp82xx_startup_test+0x1c>

	buffer_send_string("AT Startup test successful...\n\r",debug_port);
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <esp82xx_startup_test+0x44>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <esp82xx_startup_test+0x48>)
 8000d40:	f7ff fd10 	bl	8000764 <buffer_send_string>

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	080019c8 	.word	0x080019c8
 8000d50:	080019a4 	.word	0x080019a4
 8000d54:	20000070 	.word	0x20000070
 8000d58:	080019d0 	.word	0x080019d0

08000d5c <esp82xx_sta_mode>:

 /*Enable station mode*/
  void esp82xx_sta_mode(void)
  {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
 	 /*Clear esp uart buffer*/
 	 buffer_clear(esp82xx_port);
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <esp82xx_sta_mode+0x38>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff faeb 	bl	8000340 <buffer_clear>

 	 /*Send STA command*/
 	buffer_send_string("AT+CWMODE=1\r\n",esp82xx_port);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <esp82xx_sta_mode+0x38>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <esp82xx_sta_mode+0x3c>)
 8000d72:	f7ff fcf7 	bl	8000764 <buffer_send_string>

     /*Wait for "OK" response*/
 	while(! (is_response("OK\r\n"))){}
 8000d76:	bf00      	nop
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <esp82xx_sta_mode+0x40>)
 8000d7a:	f7ff fcab 	bl	80006d4 <is_response>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f9      	beq.n	8000d78 <esp82xx_sta_mode+0x1c>

 	buffer_send_string("STA Mode set successfully...\n\r",debug_port);
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <esp82xx_sta_mode+0x44>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <esp82xx_sta_mode+0x48>)
 8000d8c:	f7ff fcea 	bl	8000764 <buffer_send_string>

  }
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	080019f0 	.word	0x080019f0
 8000d9c:	080019a4 	.word	0x080019a4
 8000da0:	20000070 	.word	0x20000070
 8000da4:	08001a00 	.word	0x08001a00

08000da8 <esp82xx_ap_connect>:

  /*Connect to Access Apoint (AP)*/

 void esp82xx_ap_connect(char *ssid, char *password)
   {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b096      	sub	sp, #88	; 0x58
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  	 char data[80];

  	 /*Clear esp uart buffer*/
  	 buffer_clear(esp82xx_port);
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <esp82xx_ap_connect+0x74>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fac2 	bl	8000340 <buffer_clear>

  	 buffer_send_string("Connecting to access point...\n\r",debug_port);
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <esp82xx_ap_connect+0x78>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <esp82xx_ap_connect+0x7c>)
 8000dc4:	f7ff fcce 	bl	8000764 <buffer_send_string>

  	 /*Put ssid,password  and command into one packet*/
  	 sprintf(data,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 8000dc8:	f107 0008 	add.w	r0, r7, #8
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	4915      	ldr	r1, [pc, #84]	; (8000e28 <esp82xx_ap_connect+0x80>)
 8000dd2:	f000 f931 	bl	8001038 <siprintf>

  	 /*Send entire packet to esp uart*/
  	 buffer_send_string(data,esp82xx_port);
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <esp82xx_ap_connect+0x74>)
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fcbf 	bl	8000764 <buffer_send_string>

  	  /*Wait for "OK" response*/
  	 while(! (is_response("OK\r\n"))){}
 8000de6:	bf00      	nop
 8000de8:	4810      	ldr	r0, [pc, #64]	; (8000e2c <esp82xx_ap_connect+0x84>)
 8000dea:	f7ff fc73 	bl	80006d4 <is_response>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f9      	beq.n	8000de8 <esp82xx_ap_connect+0x40>

  	 sprintf(data, "Connected : \"%s\"\r\n",ssid);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <esp82xx_ap_connect+0x88>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f91b 	bl	8001038 <siprintf>

  	 buffer_send_string(data,debug_port);
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <esp82xx_ap_connect+0x78>)
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fca9 	bl	8000764 <buffer_send_string>

   }
 8000e12:	bf00      	nop
 8000e14:	3758      	adds	r7, #88	; 0x58
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000070 	.word	0x20000070
 8000e24:	08001a20 	.word	0x08001a20
 8000e28:	08001a40 	.word	0x08001a40
 8000e2c:	080019a4 	.word	0x080019a4
 8000e30:	08001a58 	.word	0x08001a58

08000e34 <esp82xx_get_local_ip>:

 /*Get device local IP address*/

void esp82xx_get_local_ip(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09a      	sub	sp, #104	; 0x68
 8000e38:	af00      	add	r7, sp, #0
	 char data[80];
	 char buffer[20];
	 int len;

	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <esp82xx_get_local_ip+0x8c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fa7e 	bl	8000340 <buffer_clear>

	 /*Send 'get ip address ' command*/
	 buffer_send_string("AT+CIFSR\r\n",esp82xx_port);
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <esp82xx_get_local_ip+0x8c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <esp82xx_get_local_ip+0x90>)
 8000e4c:	f7ff fc8a 	bl	8000764 <buffer_send_string>

	 /*Wait for 'Station IP'  response*/
	 while(!(is_response("CIFSR:STAIP,\""))){}
 8000e50:	bf00      	nop
 8000e52:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <esp82xx_get_local_ip+0x94>)
 8000e54:	f7ff fc3e 	bl	80006d4 <is_response>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f9      	beq.n	8000e52 <esp82xx_get_local_ip+0x1e>

	 /*Copy IP address portion*/
	 while(!(copy_up_to_string("\"",buffer))){}
 8000e5e:	bf00      	nop
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	4819      	ldr	r0, [pc, #100]	; (8000ecc <esp82xx_get_local_ip+0x98>)
 8000e66:	f7ff fd29 	bl	80008bc <copy_up_to_string>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f7      	beq.n	8000e60 <esp82xx_get_local_ip+0x2c>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000e70:	bf00      	nop
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <esp82xx_get_local_ip+0x9c>)
 8000e74:	f7ff fc2e 	bl	80006d4 <is_response>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <esp82xx_get_local_ip+0x3e>

	 len = strlen(buffer);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9ad 	bl	80001e0 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	667b      	str	r3, [r7, #100]	; 0x64

	 buffer[len - 1] = '\0';
 8000e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	3368      	adds	r3, #104	; 0x68
 8000e90:	443b      	add	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	f803 2c68 	strb.w	r2, [r3, #-104]

	 sprintf(data,"Local IP Address :  %s \r\n",buffer);
 8000e98:	463a      	mov	r2, r7
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <esp82xx_get_local_ip+0xa0>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f8c9 	bl	8001038 <siprintf>

	 buffer_send_string(data,debug_port);
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <esp82xx_get_local_ip+0xa4>)
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc57 	bl	8000764 <buffer_send_string>


 }
 8000eb6:	bf00      	nop
 8000eb8:	3768      	adds	r7, #104	; 0x68
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	08001a6c 	.word	0x08001a6c
 8000ec8:	08001a78 	.word	0x08001a78
 8000ecc:	08001a88 	.word	0x08001a88
 8000ed0:	080019a4 	.word	0x080019a4
 8000ed4:	08001a8c 	.word	0x08001a8c
 8000ed8:	20000070 	.word	0x20000070

08000edc <esp82xx_multi_conn_en>:

/*Enable multiple connections*/
 void esp82xx_multi_conn_en(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <esp82xx_multi_conn_en+0x38>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fa2b 	bl	8000340 <buffer_clear>

	 /*Send 'enable multi conn cmd'*/
	 buffer_send_string("AT+CIPMUX=1\r\n",esp82xx_port);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <esp82xx_multi_conn_en+0x38>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <esp82xx_multi_conn_en+0x3c>)
 8000ef2:	f7ff fc37 	bl	8000764 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000ef6:	bf00      	nop
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <esp82xx_multi_conn_en+0x40>)
 8000efa:	f7ff fbeb 	bl	80006d4 <is_response>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f9      	beq.n	8000ef8 <esp82xx_multi_conn_en+0x1c>

	 buffer_send_string("Multiple connections enabled....\n\r",debug_port);
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <esp82xx_multi_conn_en+0x44>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <esp82xx_multi_conn_en+0x48>)
 8000f0c:	f7ff fc2a 	bl	8000764 <buffer_send_string>

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	08001aa8 	.word	0x08001aa8
 8000f1c:	080019a4 	.word	0x080019a4
 8000f20:	20000070 	.word	0x20000070
 8000f24:	08001ab8 	.word	0x08001ab8

08000f28 <USART1_IRQHandler>:



 void USART1_IRQHandler(void)
 {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
 	esp82_uart_callback();
 8000f2c:	f7ff fcd6 	bl	80008dc <esp82_uart_callback>
 }
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <USART2_IRQHandler>:


 void USART2_IRQHandler(void)
 {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
 	debug_uart_callback();
 8000f38:	f7ff fd20 	bl	800097c <debug_uart_callback>
 }
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <main>:

#define SSID_NAME  "TOPNET_7908"
#define PASSKEY    "0keug9x26c"

int main()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

	/*Initialize debug uart*/
   debug_uart_init();
 8000f44:	f7ff fd88 	bl	8000a58 <debug_uart_init>
   esp_uart_init();
 8000f48:	f7ff fe02 	bl	8000b50 <esp_uart_init>

    /*Initialize circular buffer*/
   circular_buffer_init();
 8000f4c:	f7ff f9a0 	bl	8000290 <circular_buffer_init>

   /*Send string*/

 esp82xx_reset();
 8000f50:	f7ff feb8 	bl	8000cc4 <esp82xx_reset>
 esp82xx_startup_test();
 8000f54:	f7ff fedc 	bl	8000d10 <esp82xx_startup_test>
 esp82xx_sta_mode();
 8000f58:	f7ff ff00 	bl	8000d5c <esp82xx_sta_mode>
 esp82xx_ap_connect(SSID_NAME, PASSKEY);
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <main+0x30>)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <main+0x34>)
 8000f60:	f7ff ff22 	bl	8000da8 <esp82xx_ap_connect>
 esp82xx_get_local_ip();
 8000f64:	f7ff ff66 	bl	8000e34 <esp82xx_get_local_ip>
esp82xx_multi_conn_en();
 8000f68:	f7ff ffb8 	bl	8000edc <esp82xx_multi_conn_en>




while(1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x2c>
 8000f6e:	bf00      	nop
 8000f70:	08001adc 	.word	0x08001adc
 8000f74:	08001ae8 	.word	0x08001ae8

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f000 f86e 	bl	8001088 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20018000 	.word	0x20018000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	200008a4 	.word	0x200008a4
 8000fe0:	200009f0 	.word	0x200009f0

08000fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	; (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001012:	f000 f83f 	bl	8001094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001016:	f7ff ff93 	bl	8000f40 <main>

0800101a <LoopForever>:

LoopForever:
  b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   r0, =_estack
 800101c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001028:	08001b30 	.word	0x08001b30
  ldr r2, =_sbss
 800102c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001030:	200009f0 	.word	0x200009f0

08001034 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <siprintf>:
 8001038:	b40e      	push	{r1, r2, r3}
 800103a:	b500      	push	{lr}
 800103c:	b09c      	sub	sp, #112	; 0x70
 800103e:	ab1d      	add	r3, sp, #116	; 0x74
 8001040:	9002      	str	r0, [sp, #8]
 8001042:	9006      	str	r0, [sp, #24]
 8001044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <siprintf+0x38>)
 800104a:	9107      	str	r1, [sp, #28]
 800104c:	9104      	str	r1, [sp, #16]
 800104e:	4909      	ldr	r1, [pc, #36]	; (8001074 <siprintf+0x3c>)
 8001050:	f853 2b04 	ldr.w	r2, [r3], #4
 8001054:	9105      	str	r1, [sp, #20]
 8001056:	6800      	ldr	r0, [r0, #0]
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	a902      	add	r1, sp, #8
 800105c:	f000 f992 	bl	8001384 <_svfiprintf_r>
 8001060:	9b02      	ldr	r3, [sp, #8]
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	b01c      	add	sp, #112	; 0x70
 8001068:	f85d eb04 	ldr.w	lr, [sp], #4
 800106c:	b003      	add	sp, #12
 800106e:	4770      	bx	lr
 8001070:	20000050 	.word	0x20000050
 8001074:	ffff0208 	.word	0xffff0208

08001078 <memset>:
 8001078:	4402      	add	r2, r0
 800107a:	4603      	mov	r3, r0
 800107c:	4293      	cmp	r3, r2
 800107e:	d100      	bne.n	8001082 <memset+0xa>
 8001080:	4770      	bx	lr
 8001082:	f803 1b01 	strb.w	r1, [r3], #1
 8001086:	e7f9      	b.n	800107c <memset+0x4>

08001088 <__errno>:
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <__errno+0x8>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000050 	.word	0x20000050

08001094 <__libc_init_array>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	4d0d      	ldr	r5, [pc, #52]	; (80010cc <__libc_init_array+0x38>)
 8001098:	4c0d      	ldr	r4, [pc, #52]	; (80010d0 <__libc_init_array+0x3c>)
 800109a:	1b64      	subs	r4, r4, r5
 800109c:	10a4      	asrs	r4, r4, #2
 800109e:	2600      	movs	r6, #0
 80010a0:	42a6      	cmp	r6, r4
 80010a2:	d109      	bne.n	80010b8 <__libc_init_array+0x24>
 80010a4:	4d0b      	ldr	r5, [pc, #44]	; (80010d4 <__libc_init_array+0x40>)
 80010a6:	4c0c      	ldr	r4, [pc, #48]	; (80010d8 <__libc_init_array+0x44>)
 80010a8:	f000 fc6a 	bl	8001980 <_init>
 80010ac:	1b64      	subs	r4, r4, r5
 80010ae:	10a4      	asrs	r4, r4, #2
 80010b0:	2600      	movs	r6, #0
 80010b2:	42a6      	cmp	r6, r4
 80010b4:	d105      	bne.n	80010c2 <__libc_init_array+0x2e>
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010bc:	4798      	blx	r3
 80010be:	3601      	adds	r6, #1
 80010c0:	e7ee      	b.n	80010a0 <__libc_init_array+0xc>
 80010c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c6:	4798      	blx	r3
 80010c8:	3601      	adds	r6, #1
 80010ca:	e7f2      	b.n	80010b2 <__libc_init_array+0x1e>
 80010cc:	08001b28 	.word	0x08001b28
 80010d0:	08001b28 	.word	0x08001b28
 80010d4:	08001b28 	.word	0x08001b28
 80010d8:	08001b2c 	.word	0x08001b2c

080010dc <__retarget_lock_acquire_recursive>:
 80010dc:	4770      	bx	lr

080010de <__retarget_lock_release_recursive>:
 80010de:	4770      	bx	lr

080010e0 <_free_r>:
 80010e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d044      	beq.n	8001170 <_free_r+0x90>
 80010e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010ea:	9001      	str	r0, [sp, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f1a1 0404 	sub.w	r4, r1, #4
 80010f2:	bfb8      	it	lt
 80010f4:	18e4      	addlt	r4, r4, r3
 80010f6:	f000 f8df 	bl	80012b8 <__malloc_lock>
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <_free_r+0x94>)
 80010fc:	9801      	ldr	r0, [sp, #4]
 80010fe:	6813      	ldr	r3, [r2, #0]
 8001100:	b933      	cbnz	r3, 8001110 <_free_r+0x30>
 8001102:	6063      	str	r3, [r4, #4]
 8001104:	6014      	str	r4, [r2, #0]
 8001106:	b003      	add	sp, #12
 8001108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800110c:	f000 b8da 	b.w	80012c4 <__malloc_unlock>
 8001110:	42a3      	cmp	r3, r4
 8001112:	d908      	bls.n	8001126 <_free_r+0x46>
 8001114:	6825      	ldr	r5, [r4, #0]
 8001116:	1961      	adds	r1, r4, r5
 8001118:	428b      	cmp	r3, r1
 800111a:	bf01      	itttt	eq
 800111c:	6819      	ldreq	r1, [r3, #0]
 800111e:	685b      	ldreq	r3, [r3, #4]
 8001120:	1949      	addeq	r1, r1, r5
 8001122:	6021      	streq	r1, [r4, #0]
 8001124:	e7ed      	b.n	8001102 <_free_r+0x22>
 8001126:	461a      	mov	r2, r3
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	b10b      	cbz	r3, 8001130 <_free_r+0x50>
 800112c:	42a3      	cmp	r3, r4
 800112e:	d9fa      	bls.n	8001126 <_free_r+0x46>
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	1855      	adds	r5, r2, r1
 8001134:	42a5      	cmp	r5, r4
 8001136:	d10b      	bne.n	8001150 <_free_r+0x70>
 8001138:	6824      	ldr	r4, [r4, #0]
 800113a:	4421      	add	r1, r4
 800113c:	1854      	adds	r4, r2, r1
 800113e:	42a3      	cmp	r3, r4
 8001140:	6011      	str	r1, [r2, #0]
 8001142:	d1e0      	bne.n	8001106 <_free_r+0x26>
 8001144:	681c      	ldr	r4, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	6053      	str	r3, [r2, #4]
 800114a:	440c      	add	r4, r1
 800114c:	6014      	str	r4, [r2, #0]
 800114e:	e7da      	b.n	8001106 <_free_r+0x26>
 8001150:	d902      	bls.n	8001158 <_free_r+0x78>
 8001152:	230c      	movs	r3, #12
 8001154:	6003      	str	r3, [r0, #0]
 8001156:	e7d6      	b.n	8001106 <_free_r+0x26>
 8001158:	6825      	ldr	r5, [r4, #0]
 800115a:	1961      	adds	r1, r4, r5
 800115c:	428b      	cmp	r3, r1
 800115e:	bf04      	itt	eq
 8001160:	6819      	ldreq	r1, [r3, #0]
 8001162:	685b      	ldreq	r3, [r3, #4]
 8001164:	6063      	str	r3, [r4, #4]
 8001166:	bf04      	itt	eq
 8001168:	1949      	addeq	r1, r1, r5
 800116a:	6021      	streq	r1, [r4, #0]
 800116c:	6054      	str	r4, [r2, #4]
 800116e:	e7ca      	b.n	8001106 <_free_r+0x26>
 8001170:	b003      	add	sp, #12
 8001172:	bd30      	pop	{r4, r5, pc}
 8001174:	200009e8 	.word	0x200009e8

08001178 <sbrk_aligned>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	4e0e      	ldr	r6, [pc, #56]	; (80011b4 <sbrk_aligned+0x3c>)
 800117c:	460c      	mov	r4, r1
 800117e:	6831      	ldr	r1, [r6, #0]
 8001180:	4605      	mov	r5, r0
 8001182:	b911      	cbnz	r1, 800118a <sbrk_aligned+0x12>
 8001184:	f000 fba6 	bl	80018d4 <_sbrk_r>
 8001188:	6030      	str	r0, [r6, #0]
 800118a:	4621      	mov	r1, r4
 800118c:	4628      	mov	r0, r5
 800118e:	f000 fba1 	bl	80018d4 <_sbrk_r>
 8001192:	1c43      	adds	r3, r0, #1
 8001194:	d00a      	beq.n	80011ac <sbrk_aligned+0x34>
 8001196:	1cc4      	adds	r4, r0, #3
 8001198:	f024 0403 	bic.w	r4, r4, #3
 800119c:	42a0      	cmp	r0, r4
 800119e:	d007      	beq.n	80011b0 <sbrk_aligned+0x38>
 80011a0:	1a21      	subs	r1, r4, r0
 80011a2:	4628      	mov	r0, r5
 80011a4:	f000 fb96 	bl	80018d4 <_sbrk_r>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d101      	bne.n	80011b0 <sbrk_aligned+0x38>
 80011ac:	f04f 34ff 	mov.w	r4, #4294967295
 80011b0:	4620      	mov	r0, r4
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	200009ec 	.word	0x200009ec

080011b8 <_malloc_r>:
 80011b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011bc:	1ccd      	adds	r5, r1, #3
 80011be:	f025 0503 	bic.w	r5, r5, #3
 80011c2:	3508      	adds	r5, #8
 80011c4:	2d0c      	cmp	r5, #12
 80011c6:	bf38      	it	cc
 80011c8:	250c      	movcc	r5, #12
 80011ca:	2d00      	cmp	r5, #0
 80011cc:	4607      	mov	r7, r0
 80011ce:	db01      	blt.n	80011d4 <_malloc_r+0x1c>
 80011d0:	42a9      	cmp	r1, r5
 80011d2:	d905      	bls.n	80011e0 <_malloc_r+0x28>
 80011d4:	230c      	movs	r3, #12
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	2600      	movs	r6, #0
 80011da:	4630      	mov	r0, r6
 80011dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80012b4 <_malloc_r+0xfc>
 80011e4:	f000 f868 	bl	80012b8 <__malloc_lock>
 80011e8:	f8d8 3000 	ldr.w	r3, [r8]
 80011ec:	461c      	mov	r4, r3
 80011ee:	bb5c      	cbnz	r4, 8001248 <_malloc_r+0x90>
 80011f0:	4629      	mov	r1, r5
 80011f2:	4638      	mov	r0, r7
 80011f4:	f7ff ffc0 	bl	8001178 <sbrk_aligned>
 80011f8:	1c43      	adds	r3, r0, #1
 80011fa:	4604      	mov	r4, r0
 80011fc:	d155      	bne.n	80012aa <_malloc_r+0xf2>
 80011fe:	f8d8 4000 	ldr.w	r4, [r8]
 8001202:	4626      	mov	r6, r4
 8001204:	2e00      	cmp	r6, #0
 8001206:	d145      	bne.n	8001294 <_malloc_r+0xdc>
 8001208:	2c00      	cmp	r4, #0
 800120a:	d048      	beq.n	800129e <_malloc_r+0xe6>
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	4631      	mov	r1, r6
 8001210:	4638      	mov	r0, r7
 8001212:	eb04 0903 	add.w	r9, r4, r3
 8001216:	f000 fb5d 	bl	80018d4 <_sbrk_r>
 800121a:	4581      	cmp	r9, r0
 800121c:	d13f      	bne.n	800129e <_malloc_r+0xe6>
 800121e:	6821      	ldr	r1, [r4, #0]
 8001220:	1a6d      	subs	r5, r5, r1
 8001222:	4629      	mov	r1, r5
 8001224:	4638      	mov	r0, r7
 8001226:	f7ff ffa7 	bl	8001178 <sbrk_aligned>
 800122a:	3001      	adds	r0, #1
 800122c:	d037      	beq.n	800129e <_malloc_r+0xe6>
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	442b      	add	r3, r5
 8001232:	6023      	str	r3, [r4, #0]
 8001234:	f8d8 3000 	ldr.w	r3, [r8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d038      	beq.n	80012ae <_malloc_r+0xf6>
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	42a2      	cmp	r2, r4
 8001240:	d12b      	bne.n	800129a <_malloc_r+0xe2>
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	e00f      	b.n	8001268 <_malloc_r+0xb0>
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	1b52      	subs	r2, r2, r5
 800124c:	d41f      	bmi.n	800128e <_malloc_r+0xd6>
 800124e:	2a0b      	cmp	r2, #11
 8001250:	d917      	bls.n	8001282 <_malloc_r+0xca>
 8001252:	1961      	adds	r1, r4, r5
 8001254:	42a3      	cmp	r3, r4
 8001256:	6025      	str	r5, [r4, #0]
 8001258:	bf18      	it	ne
 800125a:	6059      	strne	r1, [r3, #4]
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	bf08      	it	eq
 8001260:	f8c8 1000 	streq.w	r1, [r8]
 8001264:	5162      	str	r2, [r4, r5]
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	4638      	mov	r0, r7
 800126a:	f104 060b 	add.w	r6, r4, #11
 800126e:	f000 f829 	bl	80012c4 <__malloc_unlock>
 8001272:	f026 0607 	bic.w	r6, r6, #7
 8001276:	1d23      	adds	r3, r4, #4
 8001278:	1af2      	subs	r2, r6, r3
 800127a:	d0ae      	beq.n	80011da <_malloc_r+0x22>
 800127c:	1b9b      	subs	r3, r3, r6
 800127e:	50a3      	str	r3, [r4, r2]
 8001280:	e7ab      	b.n	80011da <_malloc_r+0x22>
 8001282:	42a3      	cmp	r3, r4
 8001284:	6862      	ldr	r2, [r4, #4]
 8001286:	d1dd      	bne.n	8001244 <_malloc_r+0x8c>
 8001288:	f8c8 2000 	str.w	r2, [r8]
 800128c:	e7ec      	b.n	8001268 <_malloc_r+0xb0>
 800128e:	4623      	mov	r3, r4
 8001290:	6864      	ldr	r4, [r4, #4]
 8001292:	e7ac      	b.n	80011ee <_malloc_r+0x36>
 8001294:	4634      	mov	r4, r6
 8001296:	6876      	ldr	r6, [r6, #4]
 8001298:	e7b4      	b.n	8001204 <_malloc_r+0x4c>
 800129a:	4613      	mov	r3, r2
 800129c:	e7cc      	b.n	8001238 <_malloc_r+0x80>
 800129e:	230c      	movs	r3, #12
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4638      	mov	r0, r7
 80012a4:	f000 f80e 	bl	80012c4 <__malloc_unlock>
 80012a8:	e797      	b.n	80011da <_malloc_r+0x22>
 80012aa:	6025      	str	r5, [r4, #0]
 80012ac:	e7dc      	b.n	8001268 <_malloc_r+0xb0>
 80012ae:	605b      	str	r3, [r3, #4]
 80012b0:	deff      	udf	#255	; 0xff
 80012b2:	bf00      	nop
 80012b4:	200009e8 	.word	0x200009e8

080012b8 <__malloc_lock>:
 80012b8:	4801      	ldr	r0, [pc, #4]	; (80012c0 <__malloc_lock+0x8>)
 80012ba:	f7ff bf0f 	b.w	80010dc <__retarget_lock_acquire_recursive>
 80012be:	bf00      	nop
 80012c0:	200009e4 	.word	0x200009e4

080012c4 <__malloc_unlock>:
 80012c4:	4801      	ldr	r0, [pc, #4]	; (80012cc <__malloc_unlock+0x8>)
 80012c6:	f7ff bf0a 	b.w	80010de <__retarget_lock_release_recursive>
 80012ca:	bf00      	nop
 80012cc:	200009e4 	.word	0x200009e4

080012d0 <__ssputs_r>:
 80012d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012d4:	688e      	ldr	r6, [r1, #8]
 80012d6:	461f      	mov	r7, r3
 80012d8:	42be      	cmp	r6, r7
 80012da:	680b      	ldr	r3, [r1, #0]
 80012dc:	4682      	mov	sl, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	4690      	mov	r8, r2
 80012e2:	d82c      	bhi.n	800133e <__ssputs_r+0x6e>
 80012e4:	898a      	ldrh	r2, [r1, #12]
 80012e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012ea:	d026      	beq.n	800133a <__ssputs_r+0x6a>
 80012ec:	6965      	ldr	r5, [r4, #20]
 80012ee:	6909      	ldr	r1, [r1, #16]
 80012f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012f4:	eba3 0901 	sub.w	r9, r3, r1
 80012f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80012fc:	1c7b      	adds	r3, r7, #1
 80012fe:	444b      	add	r3, r9
 8001300:	106d      	asrs	r5, r5, #1
 8001302:	429d      	cmp	r5, r3
 8001304:	bf38      	it	cc
 8001306:	461d      	movcc	r5, r3
 8001308:	0553      	lsls	r3, r2, #21
 800130a:	d527      	bpl.n	800135c <__ssputs_r+0x8c>
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff ff53 	bl	80011b8 <_malloc_r>
 8001312:	4606      	mov	r6, r0
 8001314:	b360      	cbz	r0, 8001370 <__ssputs_r+0xa0>
 8001316:	6921      	ldr	r1, [r4, #16]
 8001318:	464a      	mov	r2, r9
 800131a:	f000 faeb 	bl	80018f4 <memcpy>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	81a3      	strh	r3, [r4, #12]
 800132a:	6126      	str	r6, [r4, #16]
 800132c:	6165      	str	r5, [r4, #20]
 800132e:	444e      	add	r6, r9
 8001330:	eba5 0509 	sub.w	r5, r5, r9
 8001334:	6026      	str	r6, [r4, #0]
 8001336:	60a5      	str	r5, [r4, #8]
 8001338:	463e      	mov	r6, r7
 800133a:	42be      	cmp	r6, r7
 800133c:	d900      	bls.n	8001340 <__ssputs_r+0x70>
 800133e:	463e      	mov	r6, r7
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	4632      	mov	r2, r6
 8001344:	4641      	mov	r1, r8
 8001346:	f000 faab 	bl	80018a0 <memmove>
 800134a:	68a3      	ldr	r3, [r4, #8]
 800134c:	1b9b      	subs	r3, r3, r6
 800134e:	60a3      	str	r3, [r4, #8]
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	4433      	add	r3, r6
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	2000      	movs	r0, #0
 8001358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135c:	462a      	mov	r2, r5
 800135e:	f000 fad7 	bl	8001910 <_realloc_r>
 8001362:	4606      	mov	r6, r0
 8001364:	2800      	cmp	r0, #0
 8001366:	d1e0      	bne.n	800132a <__ssputs_r+0x5a>
 8001368:	6921      	ldr	r1, [r4, #16]
 800136a:	4650      	mov	r0, sl
 800136c:	f7ff feb8 	bl	80010e0 <_free_r>
 8001370:	230c      	movs	r3, #12
 8001372:	f8ca 3000 	str.w	r3, [sl]
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295
 8001382:	e7e9      	b.n	8001358 <__ssputs_r+0x88>

08001384 <_svfiprintf_r>:
 8001384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001388:	4698      	mov	r8, r3
 800138a:	898b      	ldrh	r3, [r1, #12]
 800138c:	061b      	lsls	r3, r3, #24
 800138e:	b09d      	sub	sp, #116	; 0x74
 8001390:	4607      	mov	r7, r0
 8001392:	460d      	mov	r5, r1
 8001394:	4614      	mov	r4, r2
 8001396:	d50e      	bpl.n	80013b6 <_svfiprintf_r+0x32>
 8001398:	690b      	ldr	r3, [r1, #16]
 800139a:	b963      	cbnz	r3, 80013b6 <_svfiprintf_r+0x32>
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	f7ff ff0b 	bl	80011b8 <_malloc_r>
 80013a2:	6028      	str	r0, [r5, #0]
 80013a4:	6128      	str	r0, [r5, #16]
 80013a6:	b920      	cbnz	r0, 80013b2 <_svfiprintf_r+0x2e>
 80013a8:	230c      	movs	r3, #12
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	e0d0      	b.n	8001554 <_svfiprintf_r+0x1d0>
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	616b      	str	r3, [r5, #20]
 80013b6:	2300      	movs	r3, #0
 80013b8:	9309      	str	r3, [sp, #36]	; 0x24
 80013ba:	2320      	movs	r3, #32
 80013bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80013c4:	2330      	movs	r3, #48	; 0x30
 80013c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800156c <_svfiprintf_r+0x1e8>
 80013ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013ce:	f04f 0901 	mov.w	r9, #1
 80013d2:	4623      	mov	r3, r4
 80013d4:	469a      	mov	sl, r3
 80013d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013da:	b10a      	cbz	r2, 80013e0 <_svfiprintf_r+0x5c>
 80013dc:	2a25      	cmp	r2, #37	; 0x25
 80013de:	d1f9      	bne.n	80013d4 <_svfiprintf_r+0x50>
 80013e0:	ebba 0b04 	subs.w	fp, sl, r4
 80013e4:	d00b      	beq.n	80013fe <_svfiprintf_r+0x7a>
 80013e6:	465b      	mov	r3, fp
 80013e8:	4622      	mov	r2, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	4638      	mov	r0, r7
 80013ee:	f7ff ff6f 	bl	80012d0 <__ssputs_r>
 80013f2:	3001      	adds	r0, #1
 80013f4:	f000 80a9 	beq.w	800154a <_svfiprintf_r+0x1c6>
 80013f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013fa:	445a      	add	r2, fp
 80013fc:	9209      	str	r2, [sp, #36]	; 0x24
 80013fe:	f89a 3000 	ldrb.w	r3, [sl]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80a1 	beq.w	800154a <_svfiprintf_r+0x1c6>
 8001408:	2300      	movs	r3, #0
 800140a:	f04f 32ff 	mov.w	r2, #4294967295
 800140e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001412:	f10a 0a01 	add.w	sl, sl, #1
 8001416:	9304      	str	r3, [sp, #16]
 8001418:	9307      	str	r3, [sp, #28]
 800141a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800141e:	931a      	str	r3, [sp, #104]	; 0x68
 8001420:	4654      	mov	r4, sl
 8001422:	2205      	movs	r2, #5
 8001424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001428:	4850      	ldr	r0, [pc, #320]	; (800156c <_svfiprintf_r+0x1e8>)
 800142a:	f7fe fee1 	bl	80001f0 <memchr>
 800142e:	9a04      	ldr	r2, [sp, #16]
 8001430:	b9d8      	cbnz	r0, 800146a <_svfiprintf_r+0xe6>
 8001432:	06d0      	lsls	r0, r2, #27
 8001434:	bf44      	itt	mi
 8001436:	2320      	movmi	r3, #32
 8001438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800143c:	0711      	lsls	r1, r2, #28
 800143e:	bf44      	itt	mi
 8001440:	232b      	movmi	r3, #43	; 0x2b
 8001442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001446:	f89a 3000 	ldrb.w	r3, [sl]
 800144a:	2b2a      	cmp	r3, #42	; 0x2a
 800144c:	d015      	beq.n	800147a <_svfiprintf_r+0xf6>
 800144e:	9a07      	ldr	r2, [sp, #28]
 8001450:	4654      	mov	r4, sl
 8001452:	2000      	movs	r0, #0
 8001454:	f04f 0c0a 	mov.w	ip, #10
 8001458:	4621      	mov	r1, r4
 800145a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800145e:	3b30      	subs	r3, #48	; 0x30
 8001460:	2b09      	cmp	r3, #9
 8001462:	d94d      	bls.n	8001500 <_svfiprintf_r+0x17c>
 8001464:	b1b0      	cbz	r0, 8001494 <_svfiprintf_r+0x110>
 8001466:	9207      	str	r2, [sp, #28]
 8001468:	e014      	b.n	8001494 <_svfiprintf_r+0x110>
 800146a:	eba0 0308 	sub.w	r3, r0, r8
 800146e:	fa09 f303 	lsl.w	r3, r9, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	9304      	str	r3, [sp, #16]
 8001476:	46a2      	mov	sl, r4
 8001478:	e7d2      	b.n	8001420 <_svfiprintf_r+0x9c>
 800147a:	9b03      	ldr	r3, [sp, #12]
 800147c:	1d19      	adds	r1, r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	9103      	str	r1, [sp, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bfbb      	ittet	lt
 8001486:	425b      	neglt	r3, r3
 8001488:	f042 0202 	orrlt.w	r2, r2, #2
 800148c:	9307      	strge	r3, [sp, #28]
 800148e:	9307      	strlt	r3, [sp, #28]
 8001490:	bfb8      	it	lt
 8001492:	9204      	strlt	r2, [sp, #16]
 8001494:	7823      	ldrb	r3, [r4, #0]
 8001496:	2b2e      	cmp	r3, #46	; 0x2e
 8001498:	d10c      	bne.n	80014b4 <_svfiprintf_r+0x130>
 800149a:	7863      	ldrb	r3, [r4, #1]
 800149c:	2b2a      	cmp	r3, #42	; 0x2a
 800149e:	d134      	bne.n	800150a <_svfiprintf_r+0x186>
 80014a0:	9b03      	ldr	r3, [sp, #12]
 80014a2:	1d1a      	adds	r2, r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	9203      	str	r2, [sp, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bfb8      	it	lt
 80014ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80014b0:	3402      	adds	r4, #2
 80014b2:	9305      	str	r3, [sp, #20]
 80014b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800157c <_svfiprintf_r+0x1f8>
 80014b8:	7821      	ldrb	r1, [r4, #0]
 80014ba:	2203      	movs	r2, #3
 80014bc:	4650      	mov	r0, sl
 80014be:	f7fe fe97 	bl	80001f0 <memchr>
 80014c2:	b138      	cbz	r0, 80014d4 <_svfiprintf_r+0x150>
 80014c4:	9b04      	ldr	r3, [sp, #16]
 80014c6:	eba0 000a 	sub.w	r0, r0, sl
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	4082      	lsls	r2, r0
 80014ce:	4313      	orrs	r3, r2
 80014d0:	3401      	adds	r4, #1
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014d8:	4825      	ldr	r0, [pc, #148]	; (8001570 <_svfiprintf_r+0x1ec>)
 80014da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014de:	2206      	movs	r2, #6
 80014e0:	f7fe fe86 	bl	80001f0 <memchr>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d038      	beq.n	800155a <_svfiprintf_r+0x1d6>
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <_svfiprintf_r+0x1f0>)
 80014ea:	bb1b      	cbnz	r3, 8001534 <_svfiprintf_r+0x1b0>
 80014ec:	9b03      	ldr	r3, [sp, #12]
 80014ee:	3307      	adds	r3, #7
 80014f0:	f023 0307 	bic.w	r3, r3, #7
 80014f4:	3308      	adds	r3, #8
 80014f6:	9303      	str	r3, [sp, #12]
 80014f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014fa:	4433      	add	r3, r6
 80014fc:	9309      	str	r3, [sp, #36]	; 0x24
 80014fe:	e768      	b.n	80013d2 <_svfiprintf_r+0x4e>
 8001500:	fb0c 3202 	mla	r2, ip, r2, r3
 8001504:	460c      	mov	r4, r1
 8001506:	2001      	movs	r0, #1
 8001508:	e7a6      	b.n	8001458 <_svfiprintf_r+0xd4>
 800150a:	2300      	movs	r3, #0
 800150c:	3401      	adds	r4, #1
 800150e:	9305      	str	r3, [sp, #20]
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0c0a 	mov.w	ip, #10
 8001516:	4620      	mov	r0, r4
 8001518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800151c:	3a30      	subs	r2, #48	; 0x30
 800151e:	2a09      	cmp	r2, #9
 8001520:	d903      	bls.n	800152a <_svfiprintf_r+0x1a6>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0c6      	beq.n	80014b4 <_svfiprintf_r+0x130>
 8001526:	9105      	str	r1, [sp, #20]
 8001528:	e7c4      	b.n	80014b4 <_svfiprintf_r+0x130>
 800152a:	fb0c 2101 	mla	r1, ip, r1, r2
 800152e:	4604      	mov	r4, r0
 8001530:	2301      	movs	r3, #1
 8001532:	e7f0      	b.n	8001516 <_svfiprintf_r+0x192>
 8001534:	ab03      	add	r3, sp, #12
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	462a      	mov	r2, r5
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <_svfiprintf_r+0x1f4>)
 800153c:	a904      	add	r1, sp, #16
 800153e:	4638      	mov	r0, r7
 8001540:	f3af 8000 	nop.w
 8001544:	1c42      	adds	r2, r0, #1
 8001546:	4606      	mov	r6, r0
 8001548:	d1d6      	bne.n	80014f8 <_svfiprintf_r+0x174>
 800154a:	89ab      	ldrh	r3, [r5, #12]
 800154c:	065b      	lsls	r3, r3, #25
 800154e:	f53f af2d 	bmi.w	80013ac <_svfiprintf_r+0x28>
 8001552:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001554:	b01d      	add	sp, #116	; 0x74
 8001556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800155a:	ab03      	add	r3, sp, #12
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	462a      	mov	r2, r5
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <_svfiprintf_r+0x1f4>)
 8001562:	a904      	add	r1, sp, #16
 8001564:	4638      	mov	r0, r7
 8001566:	f000 f879 	bl	800165c <_printf_i>
 800156a:	e7eb      	b.n	8001544 <_svfiprintf_r+0x1c0>
 800156c:	08001af4 	.word	0x08001af4
 8001570:	08001afe 	.word	0x08001afe
 8001574:	00000000 	.word	0x00000000
 8001578:	080012d1 	.word	0x080012d1
 800157c:	08001afa 	.word	0x08001afa

08001580 <_printf_common>:
 8001580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	4616      	mov	r6, r2
 8001586:	4699      	mov	r9, r3
 8001588:	688a      	ldr	r2, [r1, #8]
 800158a:	690b      	ldr	r3, [r1, #16]
 800158c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001590:	4293      	cmp	r3, r2
 8001592:	bfb8      	it	lt
 8001594:	4613      	movlt	r3, r2
 8001596:	6033      	str	r3, [r6, #0]
 8001598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800159c:	4607      	mov	r7, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	b10a      	cbz	r2, 80015a6 <_printf_common+0x26>
 80015a2:	3301      	adds	r3, #1
 80015a4:	6033      	str	r3, [r6, #0]
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	0699      	lsls	r1, r3, #26
 80015aa:	bf42      	ittt	mi
 80015ac:	6833      	ldrmi	r3, [r6, #0]
 80015ae:	3302      	addmi	r3, #2
 80015b0:	6033      	strmi	r3, [r6, #0]
 80015b2:	6825      	ldr	r5, [r4, #0]
 80015b4:	f015 0506 	ands.w	r5, r5, #6
 80015b8:	d106      	bne.n	80015c8 <_printf_common+0x48>
 80015ba:	f104 0a19 	add.w	sl, r4, #25
 80015be:	68e3      	ldr	r3, [r4, #12]
 80015c0:	6832      	ldr	r2, [r6, #0]
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	42ab      	cmp	r3, r5
 80015c6:	dc26      	bgt.n	8001616 <_printf_common+0x96>
 80015c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015cc:	1e13      	subs	r3, r2, #0
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	bf18      	it	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	0692      	lsls	r2, r2, #26
 80015d6:	d42b      	bmi.n	8001630 <_printf_common+0xb0>
 80015d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015dc:	4649      	mov	r1, r9
 80015de:	4638      	mov	r0, r7
 80015e0:	47c0      	blx	r8
 80015e2:	3001      	adds	r0, #1
 80015e4:	d01e      	beq.n	8001624 <_printf_common+0xa4>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	6922      	ldr	r2, [r4, #16]
 80015ea:	f003 0306 	and.w	r3, r3, #6
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf02      	ittt	eq
 80015f2:	68e5      	ldreq	r5, [r4, #12]
 80015f4:	6833      	ldreq	r3, [r6, #0]
 80015f6:	1aed      	subeq	r5, r5, r3
 80015f8:	68a3      	ldr	r3, [r4, #8]
 80015fa:	bf0c      	ite	eq
 80015fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001600:	2500      	movne	r5, #0
 8001602:	4293      	cmp	r3, r2
 8001604:	bfc4      	itt	gt
 8001606:	1a9b      	subgt	r3, r3, r2
 8001608:	18ed      	addgt	r5, r5, r3
 800160a:	2600      	movs	r6, #0
 800160c:	341a      	adds	r4, #26
 800160e:	42b5      	cmp	r5, r6
 8001610:	d11a      	bne.n	8001648 <_printf_common+0xc8>
 8001612:	2000      	movs	r0, #0
 8001614:	e008      	b.n	8001628 <_printf_common+0xa8>
 8001616:	2301      	movs	r3, #1
 8001618:	4652      	mov	r2, sl
 800161a:	4649      	mov	r1, r9
 800161c:	4638      	mov	r0, r7
 800161e:	47c0      	blx	r8
 8001620:	3001      	adds	r0, #1
 8001622:	d103      	bne.n	800162c <_printf_common+0xac>
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800162c:	3501      	adds	r5, #1
 800162e:	e7c6      	b.n	80015be <_printf_common+0x3e>
 8001630:	18e1      	adds	r1, r4, r3
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	2030      	movs	r0, #48	; 0x30
 8001636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800163a:	4422      	add	r2, r4
 800163c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001644:	3302      	adds	r3, #2
 8001646:	e7c7      	b.n	80015d8 <_printf_common+0x58>
 8001648:	2301      	movs	r3, #1
 800164a:	4622      	mov	r2, r4
 800164c:	4649      	mov	r1, r9
 800164e:	4638      	mov	r0, r7
 8001650:	47c0      	blx	r8
 8001652:	3001      	adds	r0, #1
 8001654:	d0e6      	beq.n	8001624 <_printf_common+0xa4>
 8001656:	3601      	adds	r6, #1
 8001658:	e7d9      	b.n	800160e <_printf_common+0x8e>
	...

0800165c <_printf_i>:
 800165c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001660:	7e0f      	ldrb	r7, [r1, #24]
 8001662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001664:	2f78      	cmp	r7, #120	; 0x78
 8001666:	4691      	mov	r9, r2
 8001668:	4680      	mov	r8, r0
 800166a:	460c      	mov	r4, r1
 800166c:	469a      	mov	sl, r3
 800166e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001672:	d807      	bhi.n	8001684 <_printf_i+0x28>
 8001674:	2f62      	cmp	r7, #98	; 0x62
 8001676:	d80a      	bhi.n	800168e <_printf_i+0x32>
 8001678:	2f00      	cmp	r7, #0
 800167a:	f000 80d4 	beq.w	8001826 <_printf_i+0x1ca>
 800167e:	2f58      	cmp	r7, #88	; 0x58
 8001680:	f000 80c0 	beq.w	8001804 <_printf_i+0x1a8>
 8001684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800168c:	e03a      	b.n	8001704 <_printf_i+0xa8>
 800168e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001692:	2b15      	cmp	r3, #21
 8001694:	d8f6      	bhi.n	8001684 <_printf_i+0x28>
 8001696:	a101      	add	r1, pc, #4	; (adr r1, 800169c <_printf_i+0x40>)
 8001698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800169c:	080016f5 	.word	0x080016f5
 80016a0:	08001709 	.word	0x08001709
 80016a4:	08001685 	.word	0x08001685
 80016a8:	08001685 	.word	0x08001685
 80016ac:	08001685 	.word	0x08001685
 80016b0:	08001685 	.word	0x08001685
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001685 	.word	0x08001685
 80016bc:	08001685 	.word	0x08001685
 80016c0:	08001685 	.word	0x08001685
 80016c4:	08001685 	.word	0x08001685
 80016c8:	0800180d 	.word	0x0800180d
 80016cc:	08001735 	.word	0x08001735
 80016d0:	080017c7 	.word	0x080017c7
 80016d4:	08001685 	.word	0x08001685
 80016d8:	08001685 	.word	0x08001685
 80016dc:	0800182f 	.word	0x0800182f
 80016e0:	08001685 	.word	0x08001685
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001685 	.word	0x08001685
 80016ec:	08001685 	.word	0x08001685
 80016f0:	080017cf 	.word	0x080017cf
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	1d1a      	adds	r2, r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	602a      	str	r2, [r5, #0]
 80016fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001704:	2301      	movs	r3, #1
 8001706:	e09f      	b.n	8001848 <_printf_i+0x1ec>
 8001708:	6820      	ldr	r0, [r4, #0]
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	0607      	lsls	r7, r0, #24
 800170e:	f103 0104 	add.w	r1, r3, #4
 8001712:	6029      	str	r1, [r5, #0]
 8001714:	d501      	bpl.n	800171a <_printf_i+0xbe>
 8001716:	681e      	ldr	r6, [r3, #0]
 8001718:	e003      	b.n	8001722 <_printf_i+0xc6>
 800171a:	0646      	lsls	r6, r0, #25
 800171c:	d5fb      	bpl.n	8001716 <_printf_i+0xba>
 800171e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001722:	2e00      	cmp	r6, #0
 8001724:	da03      	bge.n	800172e <_printf_i+0xd2>
 8001726:	232d      	movs	r3, #45	; 0x2d
 8001728:	4276      	negs	r6, r6
 800172a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800172e:	485a      	ldr	r0, [pc, #360]	; (8001898 <_printf_i+0x23c>)
 8001730:	230a      	movs	r3, #10
 8001732:	e012      	b.n	800175a <_printf_i+0xfe>
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	6820      	ldr	r0, [r4, #0]
 8001738:	1d19      	adds	r1, r3, #4
 800173a:	6029      	str	r1, [r5, #0]
 800173c:	0605      	lsls	r5, r0, #24
 800173e:	d501      	bpl.n	8001744 <_printf_i+0xe8>
 8001740:	681e      	ldr	r6, [r3, #0]
 8001742:	e002      	b.n	800174a <_printf_i+0xee>
 8001744:	0641      	lsls	r1, r0, #25
 8001746:	d5fb      	bpl.n	8001740 <_printf_i+0xe4>
 8001748:	881e      	ldrh	r6, [r3, #0]
 800174a:	4853      	ldr	r0, [pc, #332]	; (8001898 <_printf_i+0x23c>)
 800174c:	2f6f      	cmp	r7, #111	; 0x6f
 800174e:	bf0c      	ite	eq
 8001750:	2308      	moveq	r3, #8
 8001752:	230a      	movne	r3, #10
 8001754:	2100      	movs	r1, #0
 8001756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800175a:	6865      	ldr	r5, [r4, #4]
 800175c:	60a5      	str	r5, [r4, #8]
 800175e:	2d00      	cmp	r5, #0
 8001760:	bfa2      	ittt	ge
 8001762:	6821      	ldrge	r1, [r4, #0]
 8001764:	f021 0104 	bicge.w	r1, r1, #4
 8001768:	6021      	strge	r1, [r4, #0]
 800176a:	b90e      	cbnz	r6, 8001770 <_printf_i+0x114>
 800176c:	2d00      	cmp	r5, #0
 800176e:	d04b      	beq.n	8001808 <_printf_i+0x1ac>
 8001770:	4615      	mov	r5, r2
 8001772:	fbb6 f1f3 	udiv	r1, r6, r3
 8001776:	fb03 6711 	mls	r7, r3, r1, r6
 800177a:	5dc7      	ldrb	r7, [r0, r7]
 800177c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001780:	4637      	mov	r7, r6
 8001782:	42bb      	cmp	r3, r7
 8001784:	460e      	mov	r6, r1
 8001786:	d9f4      	bls.n	8001772 <_printf_i+0x116>
 8001788:	2b08      	cmp	r3, #8
 800178a:	d10b      	bne.n	80017a4 <_printf_i+0x148>
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	07de      	lsls	r6, r3, #31
 8001790:	d508      	bpl.n	80017a4 <_printf_i+0x148>
 8001792:	6923      	ldr	r3, [r4, #16]
 8001794:	6861      	ldr	r1, [r4, #4]
 8001796:	4299      	cmp	r1, r3
 8001798:	bfde      	ittt	le
 800179a:	2330      	movle	r3, #48	; 0x30
 800179c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017a4:	1b52      	subs	r2, r2, r5
 80017a6:	6122      	str	r2, [r4, #16]
 80017a8:	f8cd a000 	str.w	sl, [sp]
 80017ac:	464b      	mov	r3, r9
 80017ae:	aa03      	add	r2, sp, #12
 80017b0:	4621      	mov	r1, r4
 80017b2:	4640      	mov	r0, r8
 80017b4:	f7ff fee4 	bl	8001580 <_printf_common>
 80017b8:	3001      	adds	r0, #1
 80017ba:	d14a      	bne.n	8001852 <_printf_i+0x1f6>
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	b004      	add	sp, #16
 80017c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	6023      	str	r3, [r4, #0]
 80017ce:	4833      	ldr	r0, [pc, #204]	; (800189c <_printf_i+0x240>)
 80017d0:	2778      	movs	r7, #120	; 0x78
 80017d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	6829      	ldr	r1, [r5, #0]
 80017da:	061f      	lsls	r7, r3, #24
 80017dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80017e0:	d402      	bmi.n	80017e8 <_printf_i+0x18c>
 80017e2:	065f      	lsls	r7, r3, #25
 80017e4:	bf48      	it	mi
 80017e6:	b2b6      	uxthmi	r6, r6
 80017e8:	07df      	lsls	r7, r3, #31
 80017ea:	bf48      	it	mi
 80017ec:	f043 0320 	orrmi.w	r3, r3, #32
 80017f0:	6029      	str	r1, [r5, #0]
 80017f2:	bf48      	it	mi
 80017f4:	6023      	strmi	r3, [r4, #0]
 80017f6:	b91e      	cbnz	r6, 8001800 <_printf_i+0x1a4>
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	f023 0320 	bic.w	r3, r3, #32
 80017fe:	6023      	str	r3, [r4, #0]
 8001800:	2310      	movs	r3, #16
 8001802:	e7a7      	b.n	8001754 <_printf_i+0xf8>
 8001804:	4824      	ldr	r0, [pc, #144]	; (8001898 <_printf_i+0x23c>)
 8001806:	e7e4      	b.n	80017d2 <_printf_i+0x176>
 8001808:	4615      	mov	r5, r2
 800180a:	e7bd      	b.n	8001788 <_printf_i+0x12c>
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	6826      	ldr	r6, [r4, #0]
 8001810:	6961      	ldr	r1, [r4, #20]
 8001812:	1d18      	adds	r0, r3, #4
 8001814:	6028      	str	r0, [r5, #0]
 8001816:	0635      	lsls	r5, r6, #24
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	d501      	bpl.n	8001820 <_printf_i+0x1c4>
 800181c:	6019      	str	r1, [r3, #0]
 800181e:	e002      	b.n	8001826 <_printf_i+0x1ca>
 8001820:	0670      	lsls	r0, r6, #25
 8001822:	d5fb      	bpl.n	800181c <_printf_i+0x1c0>
 8001824:	8019      	strh	r1, [r3, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	6123      	str	r3, [r4, #16]
 800182a:	4615      	mov	r5, r2
 800182c:	e7bc      	b.n	80017a8 <_printf_i+0x14c>
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	1d1a      	adds	r2, r3, #4
 8001832:	602a      	str	r2, [r5, #0]
 8001834:	681d      	ldr	r5, [r3, #0]
 8001836:	6862      	ldr	r2, [r4, #4]
 8001838:	2100      	movs	r1, #0
 800183a:	4628      	mov	r0, r5
 800183c:	f7fe fcd8 	bl	80001f0 <memchr>
 8001840:	b108      	cbz	r0, 8001846 <_printf_i+0x1ea>
 8001842:	1b40      	subs	r0, r0, r5
 8001844:	6060      	str	r0, [r4, #4]
 8001846:	6863      	ldr	r3, [r4, #4]
 8001848:	6123      	str	r3, [r4, #16]
 800184a:	2300      	movs	r3, #0
 800184c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001850:	e7aa      	b.n	80017a8 <_printf_i+0x14c>
 8001852:	6923      	ldr	r3, [r4, #16]
 8001854:	462a      	mov	r2, r5
 8001856:	4649      	mov	r1, r9
 8001858:	4640      	mov	r0, r8
 800185a:	47d0      	blx	sl
 800185c:	3001      	adds	r0, #1
 800185e:	d0ad      	beq.n	80017bc <_printf_i+0x160>
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	079b      	lsls	r3, r3, #30
 8001864:	d413      	bmi.n	800188e <_printf_i+0x232>
 8001866:	68e0      	ldr	r0, [r4, #12]
 8001868:	9b03      	ldr	r3, [sp, #12]
 800186a:	4298      	cmp	r0, r3
 800186c:	bfb8      	it	lt
 800186e:	4618      	movlt	r0, r3
 8001870:	e7a6      	b.n	80017c0 <_printf_i+0x164>
 8001872:	2301      	movs	r3, #1
 8001874:	4632      	mov	r2, r6
 8001876:	4649      	mov	r1, r9
 8001878:	4640      	mov	r0, r8
 800187a:	47d0      	blx	sl
 800187c:	3001      	adds	r0, #1
 800187e:	d09d      	beq.n	80017bc <_printf_i+0x160>
 8001880:	3501      	adds	r5, #1
 8001882:	68e3      	ldr	r3, [r4, #12]
 8001884:	9903      	ldr	r1, [sp, #12]
 8001886:	1a5b      	subs	r3, r3, r1
 8001888:	42ab      	cmp	r3, r5
 800188a:	dcf2      	bgt.n	8001872 <_printf_i+0x216>
 800188c:	e7eb      	b.n	8001866 <_printf_i+0x20a>
 800188e:	2500      	movs	r5, #0
 8001890:	f104 0619 	add.w	r6, r4, #25
 8001894:	e7f5      	b.n	8001882 <_printf_i+0x226>
 8001896:	bf00      	nop
 8001898:	08001b05 	.word	0x08001b05
 800189c:	08001b16 	.word	0x08001b16

080018a0 <memmove>:
 80018a0:	4288      	cmp	r0, r1
 80018a2:	b510      	push	{r4, lr}
 80018a4:	eb01 0402 	add.w	r4, r1, r2
 80018a8:	d902      	bls.n	80018b0 <memmove+0x10>
 80018aa:	4284      	cmp	r4, r0
 80018ac:	4623      	mov	r3, r4
 80018ae:	d807      	bhi.n	80018c0 <memmove+0x20>
 80018b0:	1e43      	subs	r3, r0, #1
 80018b2:	42a1      	cmp	r1, r4
 80018b4:	d008      	beq.n	80018c8 <memmove+0x28>
 80018b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80018ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80018be:	e7f8      	b.n	80018b2 <memmove+0x12>
 80018c0:	4402      	add	r2, r0
 80018c2:	4601      	mov	r1, r0
 80018c4:	428a      	cmp	r2, r1
 80018c6:	d100      	bne.n	80018ca <memmove+0x2a>
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80018ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80018d2:	e7f7      	b.n	80018c4 <memmove+0x24>

080018d4 <_sbrk_r>:
 80018d4:	b538      	push	{r3, r4, r5, lr}
 80018d6:	4d06      	ldr	r5, [pc, #24]	; (80018f0 <_sbrk_r+0x1c>)
 80018d8:	2300      	movs	r3, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	602b      	str	r3, [r5, #0]
 80018e0:	f7ff fb4a 	bl	8000f78 <_sbrk>
 80018e4:	1c43      	adds	r3, r0, #1
 80018e6:	d102      	bne.n	80018ee <_sbrk_r+0x1a>
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	b103      	cbz	r3, 80018ee <_sbrk_r+0x1a>
 80018ec:	6023      	str	r3, [r4, #0]
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	200009e0 	.word	0x200009e0

080018f4 <memcpy>:
 80018f4:	440a      	add	r2, r1
 80018f6:	4291      	cmp	r1, r2
 80018f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80018fc:	d100      	bne.n	8001900 <memcpy+0xc>
 80018fe:	4770      	bx	lr
 8001900:	b510      	push	{r4, lr}
 8001902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800190a:	4291      	cmp	r1, r2
 800190c:	d1f9      	bne.n	8001902 <memcpy+0xe>
 800190e:	bd10      	pop	{r4, pc}

08001910 <_realloc_r>:
 8001910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001914:	4680      	mov	r8, r0
 8001916:	4614      	mov	r4, r2
 8001918:	460e      	mov	r6, r1
 800191a:	b921      	cbnz	r1, 8001926 <_realloc_r+0x16>
 800191c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001920:	4611      	mov	r1, r2
 8001922:	f7ff bc49 	b.w	80011b8 <_malloc_r>
 8001926:	b92a      	cbnz	r2, 8001934 <_realloc_r+0x24>
 8001928:	f7ff fbda 	bl	80010e0 <_free_r>
 800192c:	4625      	mov	r5, r4
 800192e:	4628      	mov	r0, r5
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001934:	f000 f81b 	bl	800196e <_malloc_usable_size_r>
 8001938:	4284      	cmp	r4, r0
 800193a:	4607      	mov	r7, r0
 800193c:	d802      	bhi.n	8001944 <_realloc_r+0x34>
 800193e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001942:	d812      	bhi.n	800196a <_realloc_r+0x5a>
 8001944:	4621      	mov	r1, r4
 8001946:	4640      	mov	r0, r8
 8001948:	f7ff fc36 	bl	80011b8 <_malloc_r>
 800194c:	4605      	mov	r5, r0
 800194e:	2800      	cmp	r0, #0
 8001950:	d0ed      	beq.n	800192e <_realloc_r+0x1e>
 8001952:	42bc      	cmp	r4, r7
 8001954:	4622      	mov	r2, r4
 8001956:	4631      	mov	r1, r6
 8001958:	bf28      	it	cs
 800195a:	463a      	movcs	r2, r7
 800195c:	f7ff ffca 	bl	80018f4 <memcpy>
 8001960:	4631      	mov	r1, r6
 8001962:	4640      	mov	r0, r8
 8001964:	f7ff fbbc 	bl	80010e0 <_free_r>
 8001968:	e7e1      	b.n	800192e <_realloc_r+0x1e>
 800196a:	4635      	mov	r5, r6
 800196c:	e7df      	b.n	800192e <_realloc_r+0x1e>

0800196e <_malloc_usable_size_r>:
 800196e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001972:	1f18      	subs	r0, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	bfbc      	itt	lt
 8001978:	580b      	ldrlt	r3, [r1, r0]
 800197a:	18c0      	addlt	r0, r0, r3
 800197c:	4770      	bx	lr
	...

08001980 <_init>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	bf00      	nop
 8001984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001986:	bc08      	pop	{r3}
 8001988:	469e      	mov	lr, r3
 800198a:	4770      	bx	lr

0800198c <_fini>:
 800198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198e:	bf00      	nop
 8001990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001992:	bc08      	pop	{r3}
 8001994:	469e      	mov	lr, r3
 8001996:	4770      	bx	lr
