#include <stdio.h>
#include <string.h>
#include "esp82xx_driver.h"
#include "circular_buffer.h"
#include "esp82xx_lib.h"

extern portType esp82xx_port;
extern portType debug_port;





/*Reset esp82xx*/

 void esp82xx_reset(void)
{
	/*Send reset command*/
	buffer_send_string("AT+RST\r\n",esp82xx_port);

	/*Delay for 1 second*/
	systick_delay_ms(1000);

	/*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}

	buffer_send_string("Reset was successful...\n\r",debug_port);
}

 /*Test AT startup*/
 void esp82xx_startup_test(void)
 {
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);

	 /*Send test command*/
	buffer_send_string("AT\r\n",esp82xx_port);



     /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}

	buffer_send_string("AT Startup test successful...\n\r",debug_port);

}

 /*Enable station mode*/
  void esp82xx_sta_mode(ESP_Config *config)
  {
	  char command[20];

	      /* Clear esp uart buffer */
	      buffer_clear(esp_port);

	      /* Create command based on mode */
	      sprintf(command, "AT+CWMODE=%d\r\n", config->mode);

	      /* Send mode command */
	      buffer_send_string(command, esp_port);

     /*Wait for "OK" response*/
 	while(! (is_response("OK\r\n"))){}

 	/* Provide feedback based on mode */
 	    if (config->mode == 1) {
 	        buffer_send_string("Mode station set successfully...\n\r", debug_port);
 	    } else if (config->mode == 2) {
 	        buffer_send_string("SoftAP mode set successfully...\n\r", debug_port);
 	    } else if (config->mode == 3) {
 	        buffer_send_string("SoftAP+Station mode set successfully...\n\r", debug_port);
 	    } else {
 	        buffer_send_string("Unknown mode...\n\r", debug_port);
 	    }
 	}



  /*Connect to Access Apoint (AP)*/

 void esp82xx_ap_connect(ESP_Config *config)
   {
  	 char data[80];

  	 /*Clear esp uart buffer*/
  	 buffer_clear(esp82xx_port);

  	 buffer_send_string("Connecting to access point...\n\r",debug_port);

  	 /*Put ssid,password  and command into one packet*/
  	 sprintf(data,"AT+CWJAP=\"%s\",\"%s\"\r\n" ,config->ssid, config->password);

  	 /*Send entire packet to esp uart*/
  	 buffer_send_string(data,esp82xx_port);

  	  /*Wait for "OK" response*/
  	 while(! (is_response("OK\r\n"))){}

  	 sprintf(data, "Connected : \"%s\"\r\n",config->ssid);

  	 buffer_send_string(data,debug_port);

   }





 void USART1_IRQHandler(void)
 {
 	esp82_uart_callback();
 }


 void USART2_IRQHandler(void)
 {
 	debug_uart_callback();
 }






